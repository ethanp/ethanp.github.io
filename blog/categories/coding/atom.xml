<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2015-12-19T16:09:29-06:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Abstraction]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/28/what-makes-a-good-abstraction/"/>
    <updated>2015-07-28T21:39:27-05:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/28/what-makes-a-good-abstraction</id>
    <content type="html"><![CDATA[<p>Creating good abstractions may have more value than anything else. The more I
learn about creating a company and writing code, the more important I realize
proper abstractions are.</p>

<p>Perhaps I should start by listing a few abstractions that I find to be &ldquo;good&rdquo;
ones so that we&rsquo;re more on the same page, because this an abstract topic, and
everyone probably has a different conception of it. Surely I&rsquo;ve missed some of
the best ones, but these roll off my head:</p>

<ol>
<li>Programming languages (in that they are a higher-level representation of
machine-code)</li>
<li>Object-oriented programming</li>
<li>Design patterns &amp; architectural patterns</li>
<li>The mouse (input device)</li>
<li>A &ldquo;process&rdquo; as used in Unix</li>
<li>Most mathematical notation</li>
</ol>


<p>So what do these have in common? They give us a mental representation of what
we&rsquo;re doing that vastly simplifies what is actually going on. This means that
in order to come up with something which is at its base level very complex, we
only need to manipulate simplified mental objects. These means we must perform
fewer total mental operations, using less mental short-term memory, to achieve
the same result.</p>

<!-- more -->


<p>My Operating Systems professor asked, &ldquo;How do you teach/learn elgance [in
design abstractions]?&rdquo; His answer was two-fold:</p>

<ol>
<li>&ldquo;Study case studies, try to learn lessons&rdquo;</li>
<li>&ldquo;When you build a system, ask yourself &lsquo;What would Ritchie and Thompson
say about my design?&rsquo;&rdquo;</li>
</ol>


<p>Sometimes when we define a good abstraction as one that facilitates mental
operations (as I&rsquo;ve done above) we can say that an elegant abstraction should
reframe what we&rsquo;re doing in terms that a more primitive human would be more
familiar with. A Unix &ldquo;process&rdquo; is basically saying that each concurrently
running program is its own discrete creature who doesn&rsquo;t occupy any parts of
the world that other creatures are occupying, and is capable of thinking and
effecting changes to its external environment, but cannot directly affect other
creatures, except to kill them, wait for them to die, and send mail to their
doorstep.</p>

<p>However, mathematical notation is in a different category, it doesn&rsquo;t really
personify anything, it most often just provides a symbol for something that
would require many words to describe. In the math library at school, I once
picked up some very old mathematical text, and it said something like</p>

<blockquote><p>The value ascribed to the first object can be said to vary in direct
proportion to the inverse of the square of the second.</p></blockquote>

<p>Oh, you mean <code>x = 1/y^2</code>? The real statement was actually much longer and more
confusing, and the representation in mathematical notation would have added
only a few more components. This notational description gets the point across
much faster, although it doesn&rsquo;t really connect with my &ldquo;inner humanity&rdquo;.</p>

<p>With each of these abstractions, we must take (perhaps a lot of) time to build
up facility with them so that they then &mdash;</p>

<p>Oh, I should add <strong>spoken and written language</strong> to that list above, duh!</p>

<p>Anyway, before we begin using an abstraction &ldquo;naturally&rdquo; we must internalize
what it represents. This is generally not easy. It took surprisingly long to
understand the basics object-oriented programming, and hopefully over the next
years I will continue to have zillions of a-ha moments in which more
complexities are bundled up into Lego bricks that can be assemble into assets
of object-oriented programs. But as stated by both Venkat Subramanian and
Martin Odersky with respect to Scala, just because something replaces
complexity with simplicity, doesn&rsquo;t mean it is easy to understand upon first
seeing it.</p>

<p>Perhaps noteworthy of the abstractions in my list above, with the exception
perhaps of item 4, they took <em>thousands</em> of people conceptualizing the same
things over and over again, each refining the abstraction, to achieve the level
of simplicity and generality with which they can be applied today. (Maybe 5 is
an exception too, I&rsquo;m not sure.)</p>

<p>So how does one learn to make a good abstraction? Well, perhaps we can forget
about being the <em>one</em> to invent a really fundamental abstraction. Maybe
information theory was an abstraction almost fully envisioned by one person,
I&rsquo;m not sure. Regardless, a small team of people is surely capable of
leveraging the innovations around them to contribute a further small
abstraction. E.g. sometimes one encounters an especially nice API, which lays
out just the right Lego bricks to be able to create a slew of useful &ldquo;things&rdquo;.</p>

<p>I want to try another case study, which is the Yelp application, because I&rsquo;m
not sure where this is going to go. Does this application fit the hypothetical
definition of an abstraction, reducing the number of mental operations required
to do accomplish an otherwise complicated task? Sure it does; I can find a good
place to by tapping a few buttons that are easy to locate without much thought.
Another thing it does is allow me forget about <em>how</em> I want to find the place
to eat by dealing with that for me. In this case, I&rsquo;m leveraging the effort
provided by Yelp&rsquo;s actual programmers, as well as the data provided by all
those people whom Yelp&rsquo;s algorithms think I am similar to. But I don&rsquo;t have to
think about all that, all I have to do is ask the application where I should
eat.</p>

<p>I want to try another case study, the hammer. I can be cheeky here and note
that my hammer makes every problem look like a nail, so it simplifies my
problems to the case of dealing with a nail, which I simply must whack at to
deal with. But sometimes my problem doesn&rsquo;t fit well into the &ldquo;nail&rdquo; box, and
the hammer will do the wrong thing. For example, when opening up those
impossible plastic packages, a hammer would potentially open the package, but
might break the contents in the process. It successfully reduced the creativity
I needed to solve the problem, but was still in the end an inelegant, or worse,
insufficient, solution.</p>

<p>Abstractions are powerful. They&rsquo;re hard to come up with. Strive for elegance.
Use them to reduce complexity. Use them to reduce the amount of mental
calculations and short term memory required to solve a problem. Just because it
takes a while to understand the abstraction doesn&rsquo;t mean it is bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learnt About Collaboration]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration/"/>
    <updated>2015-07-22T23:16:25-05:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest lesson of this summer has been in taking advantage of the
power of collaboration.</p>

<p>When my boss decided to hire me, he told me that it was in large part because
of my communication skills. I don&rsquo;t know if he still agrees with this, but I
like to think it is true.</p>

<p>One of my greatest prides is the ability to openly lose an argument. For a long
time, this has quite often been my reason for entering an argument, and I try
to make it easy to lose. If someone seems to know they&rsquo;re right, we must
together find the bridge of what I&rsquo;m missing that will be convincing beyond a
reasonable doubt of their correctness. Making it easy to lose means figuring
out what you <em>actually</em> think, making that clear, and not wavering from that
initial point of view even when more facts come to light. Or at least
acknowledging that the original viewpoint was incorrect, and now <em>this</em> is what
I [honestly] believe to be true. A regrettable human tendancy is to change
one&rsquo;s opinion during an argument as the facts come to light because &ldquo;with these
facts, my original point of view was wrong, and clearly I wasn&rsquo;t wrong, so that
couldn&rsquo;t have been my real point of view.&rdquo; This needs to be consciously
avoided.</p>

<!-- more -->


<p>But still, I haven&rsquo;t always taken advantage of opportunities to collaborate.
There is a lot of overhead when working with a partner. A lot of your time is
spent explaining to them stuff you already know. These could be things which
took quite a while of staring at text trying to understand, and now it feels
like you&rsquo;re letting them off the hook by just explaining it outright. Sometimes
there are petty disagreements in which I like to code things my way and she
hers, etc.</p>

<p>One small example is that in one project I wanted the code for a very
complicated function to have the following structure</p>

<p>```scala
def complicated1() {</p>

<pre><code>val precondition1 = state1 != invalid &amp;&amp; state2 != invalid
val precondition2 = state3 != invalid || state4 != invalid
val preconditionsMet = precondition1 &amp;&amp; precondition2
if (!preconditionsMet) {
    logError("error 1")
    return // early escape
}
val computationResult = doSomeComputing()
if (!isValid(computationResult)) {
    logError("error 2")
    return // another early escape
}
// the main logic here
</code></pre>

<p>}
```</p>

<p>whereas my partner wanted something more along the lines of the following</p>

<p>```scala
def complicated2() {</p>

<pre><code>if (state1 != invalid &amp;&amp; state2 != invalid
 &amp;&amp; (state3 != invalid || state4 != invalid)) 
{
    val computationResult = doSomeComputing()
    if (isValid(computationResult)) {
        // the main logic here
    }
    else {
        logError("error 2")
    }
}
else {
    logError("error 1")
}
</code></pre>

<p>}
```</p>

<p>It&rsquo;s a petty issue; either way the <em>exact</em> same code is going to execute, and
we each had very good reasons for finding our own way easier to understand. We
didn&rsquo;t bicker over it because we got along very well, and in the end we
actually did it my way. But in reality the actual function was considerably
more complex, and perhaps there were entirely better ways of structuring it
that neither of us noticed.</p>

<p>Now, at work, there is a new-hire considerably more senior and experienced than
I, who started 2 days ago, and who is taking over my project once I go back to
school in a few weeks; so it has been my responsibility to teach him how
everything works. Very often, he feels the need to obsessively ask me: &ldquo;Your
code that says <code>3 + 4</code>, that means you&rsquo;re adding 4 to 3, right?&rdquo; Sometimes he
says &ldquo;right?&rdquo; and I say yes, then he repeats what he said and I repeat &ldquo;yes,
you are correct&rdquo;, and this can continue and I wonder what he is getting out of
that.</p>

<p>At first I resented this because it sometimes felt like no one taught <em>me</em> much
about the codebase when I arrived; for the more complex bits, I just stared at
it until it clicked. This was fun to me, and no one ever seemed to have the
time to go in depth with it anyway. It was good practice at reading others'
code and understanding what it does. Learning new ways of accomplishing many
things that were unfamiliar. Getting used to seeing code that isn&rsquo;t formatted
<em>my way</em>, and accepting it for <em>what it is</em>. Learning how to utilize their code
from mine even when there is no explicitly exported clean API, and so forth.</p>

<p>But well it was the new-guy&rsquo;s day 3 today, and it seems we have really begun to
click as a duo. It is abundantly clear that he has a <em>wealth</em> of skills I lack.
Sure, he could definitely learn this code without my help, but I benefit a
great deal from seeing how he navigates it. What are the parts that he finds
especially confusing? The importance of variable names shines immediately
through. There are a few patches of code where I worked some Scala feature in
there just to try them out. Some of these turned out to be easier to understand
and reuse code from, and for some of them, something more cut-and-dry would
have been better.</p>

<p>Plus there&rsquo;s the fact that two minds are better than one. He&rsquo;s always
questioning my assumptions. To the point where he often straight up doesn&rsquo;t
believe what I say until I prove it. Sometimes he finds flaws in my arguments.
Sometimes, with my assumptions in hand, he invents better solutions to the
problem. Sometimes he understands what I did better than me and tells me its
advantages and disadvantages and alternatives.</p>

<p>My new partner&rsquo;s oft-stated goal is to get to a point where he can start
contributing to our project without my help, so that our concurrent efforts
will speed things along. People with a smart, helpful attitude like that have
been rare in my experience, so if he&rsquo;s being honest, I&rsquo;m all for taking him to
that place as quickly as I can.</p>

<p>I think maybe I just have a bias that everyone who doesn&rsquo;t know what I know
just wasn&rsquo;t smart enough to realize it. That is the thinking pattern of a real
asshole and this experience is making that abundantly clear. Everyone knows
that when learning something new, everything is always surprisingly confusing,
and then once it clicks, everything becomes &ldquo;trivial.&rdquo; However, I have not
spent much time teaching others, so I haven&rsquo;t had the opportunity to see this
&ldquo;click&rdquo; moment in others, and how dumb they all look before that moment occurs.
I do remember teachers explaining something, and me looking at it sideways in
confusion, and asking them to repeat it slower. This happened on many
occasions, and they must have thought I was a real idiot on each of those
occasions, but I was always so relieved when they did repeat, and I often would
strain my brain muscles and actually (partially) &ldquo;get it&rdquo; the second time
through.</p>

<p>The new-guy has taught me a lot from his attitude in joining a new team at a
new workplace. He&rsquo;s not trying to just &ldquo;set to work&rdquo; writing code willy-nilly
as quickly as possible. Compared to him, that&rsquo;s basically what I did. He wants
to <em>truly</em> understand what&rsquo;s going on. What does the architecture look like?
Who is the expert on what? Who is good at explaining things? Who is willing to
take the time to explain things? What do our users want? What do they expect?
What is the timeline? What has been built? What is he responsible for? What are
the alternative solutions that have been under consideration? Who has decision-
making power? Which teams do we collaborate with?</p>

<p>These are all questions that I know the answers to, as they are the necessary
fundamentals of how to operate and move forward. I started actively learning
the answers to these questions as soon as I arrived as well. However, I wasn&rsquo;t
as conscious and certainly not nearly as thorough at answering them as he is.
And over time I may have slipped a bit into a position of people trusting me to
do the right thing, so I don&rsquo;t feel as pressured to be on the ball with
everything at all times. But his arrival has been a reality check in the
importance of having a firm grip on the fundamentals of what are we doing and
why and how best to accomplish it in a strictly-business manner. There is no
excuse for losing one&rsquo;s professionalism, including having a &ldquo;casual&rdquo; workplace.</p>

<p>So far it has been 3 days. On a personal level of course I have learned more
during those 3 days of working with the new guy than I did during the previous
few weeks of working on my own. During this week I have probably also been
slower to accomplish those tasks remaining to finish before I leave. It is
firmly clear that this is a worthy tradeoff, and I will continue to spend the
rest of my time making sure that I am playing as great a part as possible in
his success in moving our project forward into the future. There maybe some
hiccups in our working relationship, because alas I barely know the guy, and
we&rsquo;re from different societal cultures, and my first impressions of people are
always notoriously off-base. However, now it is clear that the responsibility
is my own to make sure any future road-bumps are known to be my fault and my
problem and mine to fix with his help.</p>
]]></content>
  </entry>
  
</feed>
