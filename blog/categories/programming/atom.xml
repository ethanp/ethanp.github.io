<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-10-09T15:06:33-07:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Java Network Programming Fundamentals]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals/"/>
    <updated>2016-02-28T15:15:13-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals</id>
    <content type="html"><![CDATA[<p>Most of what I&rsquo;ve learned and discussed here comes from <em>TCP/IP Sockets in
Java</em>, a highly recommended book about this stuff by Calvert and Donahoo. Some
of it also comes from <em>Java Network Programming</em> by Elliotte Rusty Harold.</p>

<h2>Overview</h2>

<ul>
<li>The <em>only</em> transport-layer protocols Java supports are TCP &amp; UDP; for
anything else, you must link to native code via the Java Native Interface</li>
<li>TCP uses <em>stream</em> sockets, through which one generally just writes to an
<code>OutputStream</code> and reads from an <code>InputStream</code> of bytes that remain in-order
and uncorrupted and are (practically) guaranteed delivery by the
implementation of the protocol by the operating system.

<ul>
<li>Unless you&rsquo;re using NIO; see below for more on that</li>
</ul>
</li>
<li>UDP uses <em>datagram</em> sockets, through which you <code>send</code> and <code>receive</code> objects
called <code>DatagramPacket</code>s, which are just a length, a destination, and data</li>
<li>Unless you&rsquo;re using NIO, everything <em>blocks</em>: e.g. connecting to servers,
listening for clients, reads, writes, and disconnecting (for TCP)

<ul>
<li>By default most of these actions may block <em>indefinitely</em></li>
<li>For reading and connecting, you can configure a timeout, after which you
will receive an <code>InterruptedIOException</code></li>
<li>For <em>writing</em> to a TCP stream, you <em>cannot</em> configure a timeout</li>
</ul>
</li>
</ul>


<h3>Handling multiple clients</h3>

<ul>
<li>Deal with one at a time, which is simplest, especially if there&rsquo;s some state
that is shared by all potential clients. Speed may become problematic
quickly.</li>
</ul>


<p>```java
void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    handle(s);
}
</code></pre>

<p>}
void handle(Socket s) {</p>

<pre><code>InputStream in = s.getInputStream();
// process request, etc.
s.close();
</code></pre>

<p>}
```
* Create a new thread to handle each incoming client. This is still pretty
  simple, but will lead to massive overhead if you have many concurrent
  clients, and therefore you&rsquo;re context-switching all the time.</p>

<p>```java
void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    new Thread() {
        @Override public void run() {
            InputStream in = s.getInputStream();
            // process request, etc.
            s.close();
        }
    }.start()
}
</code></pre>

<p>}
```</p>

<ul>
<li>Use a thread pool to handle requests. Java has abstracted the thread pool
concept into the <code>Executors</code> factory class. There are a multitude of
executors to choose from. This <code>newCachedThreadPool()</code> one will execute each
task on an existing thread if one is idle, and will create a thread
otherwise. Threads sitting idle in the cache for over one minute are
terminated.</li>
</ul>


<p>```java
ExecutorService executor = Executors.newCachedThreadPool()</p>

<p>void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    executor.execute(new TheHandler(s));
}
</code></pre>

<p>}
static class TheHandler implements Runnable {</p>

<pre><code>Socket s;
public TheHandler(Socket s) { this.s = s; }
@Override public void run() {
    InputStream in = s.getInputStream();
    // process request, etc.
    s.close();
}
</code></pre>

<p>}
```</p>

<ul>
<li>Use NIO (rather complicated) to allow <code>N</code> threads to service <code>M</code>
clients, where <code>N</code> is small and <code>M</code> is huge. This uses event-based
programming. We can set all network operations to be non-blocking, and
only wait as long as we want to for them. An extensive example can be
found below.</li>
<li>Use a framework like Netty, Akka, etc. that wraps the NIO stuff up in a
ribbon and a tie</li>
</ul>


<h3>10K feet above NIO</h3>

<!-- more -->


<ul>
<li>If you&rsquo;re using NIO, you create <code>Channel</code>s of bytes into and out of sockets
(or file handles)</li>
<li>You register a <code>Selector</code> to be notified when the <code>Channel</code> is ready to be
read from or written to</li>
<li>You query the <code>Selector</code> to tell you which <code>Channel</code> are ready, and may then
take action on those that are</li>
<li>You get data in and out by passing a <code>Buffer</code> to the <code>Channel</code></li>
</ul>


<p>Here&rsquo;s an example based on TCP/IP Sockets in Java, a highly recommended book
about this stuff by Calvert and Donahoo.</p>

<p>```java
Selector slctr = Selector.open(); // factory
ServerSocketChannel chnl = ServerSocketChannel.open(); // factory
chnl.socket().bind(inetAddr); // set address to listen on</p>

<p>// For some reason Channels block by default. If we want to
// register with the Selector for notifications, we must turn
// that off.
chnl.configureBlocking(false);</p>

<p>// Notify Selector whenever this Channel has a new connection
// ready to be &ldquo;accepted&rdquo;. Such a notification still does
// <em>not</em> guarantee it will work immediately.
chnl.register(slctr, SelectionKey.OP_ACCEPT);</p>

<p>while (true) {</p>

<pre><code>// wait configurable period of time to be notified
// by any registered channel
int numNotifications = slctr.select(timeoutMS);
if (numNotifications == 0) {
    // We timed out without any notification.
    // We could do whatever we want here because we're
    // no longer blocked.
} else {
    // numNotifications different channels have notified us of
    // being available for Connect, Read, Accept, or Write.
    // It is OK to use these keys in concurrent threads.
    for (SelectionKey key : slctr.selectedKeys()) {
        // We're not sure which channel this key belonged to.
        // Also, notification was just a "hint" and we need to
        // check again whether the Channel is available.
        if (key.isAcceptable()) {
            // here's the actual call to accept()
            SocketChannel clientChnl =
                ((ServerSocketChannel) key.channel()).accept();

            // similar to the ServerSocketChannel
            clientChnl.configureBlocking(false);
            // Except that here we register to notify Selector
            // about being "readable", and
            clientChnl.register(
                key.selector(),
                SelectionKey.OP_READ,
                // We must associate an "attachment" with this
                // channel. This is the buffer that will be
                // filled with the incoming bytes rcvd via TCP.
                ByteBuffer.allocate(NUM_BYTES) // eg 256?
            );
        }
        if (key.isReadable()) {
            // retrieve the readable client socket's channel
            SocketChannel client =
                (SocketChannel) key.channel();

            // retrieve the ByteBuffer we associated with
            // that channel
            ByteBuffer buf = (ByteBuffer) key.attachment();

            // Attempt to read `buf.remaining()` bytes _from_
            // the Channel _into_ the ByteBuffer.
            int bytesRead = client.read(buf);

            // -1 from read() means end-of-stream, which in
            // this case means the client closed their output
            // side of the TCP connection. We may still be
            // able to send data if that side of the connection
            // has not been closed yet.
            if (bytesRead == -1) client.close();

            else if (bytesRead &gt; 0) {
                // if our application has data to write back
                // to the client, we must tell the selector
                // that we've now become interested in writing
                key.interestOps(SelectionKey.OP_READ
                                | SelectionKey.OP_WRITE);
            }
        }
        // socket not closed, and is writable
        if (key.isValid() &amp;&amp; key.isWritable()) {
            // beyond the scope of this post.
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>Tips for Traps</h2>

<ul>
<li>Don&rsquo;t write to the network through a <code>PrintStream</code>

<ul>
<li>It chooses end-of-line chars based on your platform, not the protocol
(HTTP uses <code>\r\n</code>)</li>
<li>It uses the default char encoding of your platform (likely UTF-8), not
whatever the server expects (likely UTF-8)</li>
<li>It eats all exceptions into this <code>boolean checkError()</code> method, when
you&rsquo;re better off just using the normal exception hubbub</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bit Twiddling: Data Structure Alignment]]></title>
    <link href="http://ethanp.github.io/blog/2015/09/23/bit-twiddling-data-structure-alignment/"/>
    <updated>2015-09-23T11:44:04-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/09/23/bit-twiddling-data-structure-alignment</id>
    <content type="html"><![CDATA[<p>In order to align a data structure at the nearest word-alignment to a given
starting address, we&rsquo;d must find the smallest multiple of N (a power of 2)
which is greater than or equal to integer X. Is there a way we can <em>make this
fast</em>, i.e. not use division or modulo?</p>

<h2>First Thoughts</h2>

<h3>First of all</h3>

<p><code>c
if (N &gt; X) return N;
</code></p>

<h3>Otherwise, we have two cases</h3>

<h4>First Case</h4>

<pre><code>N: 00100
X: 01100
--------
=&gt; 01100
</code></pre>

<p>This example indicates the following:</p>

<p><code>c
if (!(X &amp; (N-1))) return X;
</code></p>

<h4>Second Case</h4>

<pre><code>N: 00100       
X: 01101       
--------       
=&gt; 10000       
</code></pre>

<p>Which can be accomplished by</p>

<p><code>c
return (X | (N-1)) + 1;
</code></p>

<p>So we have the first-take program of</p>

<p><code>c
if (N &gt; X) return N;
if (!(X &amp; (N-1))) return X;
return (X | (N-1)) + 1;
</code></p>

<!-- more -->


<h2>Engineering Wisdom</h2>

<p>The above solution is in fact correct <em>(takes a quick bow)</em>.</p>

<p>When I looked up a better answer on <a href="http://stackoverflow.com/questions/19450743">StackOverflow</a>, I found a
program that does not use conditionals, and is therefore much faster</p>

<p><code>c
return (X + N - 1) &amp; ~(N - 1);
</code></p>

<p>However, it was not obvious to me that this program works! Let&rsquo;s peer inside
and see how similar it is to my solution.</p>

<p>First we&rsquo;re going to compute something, and then we&rsquo;re going to &ldquo;and&rdquo; it with
<code>~(N-1)</code>. Well, &ldquo;and"ing <em>anything</em> against <code>~(N-1)</code> is going to round it down
to a multiple of N. So that part is taken care of.</p>

<p>Now we need to get the <em>right</em> multiple of N. <code>if X &lt; N</code>, then then adding X to
N and rounding down to a multiple N is just going to give us N. That&rsquo;s the
first line of my answer, taken care of.</p>

<p>So <code>if X &gt; N</code>, we either do or don&rsquo;t have bits in place values below N. This is
what my last two lines are taking care of. However, we can deal with this by
noting that after we add X to N, if there are bits in place values below N,
when we subtract 1, it will not change any bits that will survive the &ldquo;and&rdquo;
stage. But if there are no bits in place values below N, then subtracting one
will decrement our answer wrt bits N and higher.</p>

<p>Hmm, not the best explanation of all time. But that&rsquo;s what&rsquo;s going on in there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Workflow and Scripts for Learning From Github]]></title>
    <link href="http://ethanp.github.io/blog/2015/08/11/a-workflow-and-scripts-for-learning-from-github/"/>
    <updated>2015-08-11T17:48:41-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/08/11/a-workflow-and-scripts-for-learning-from-github</id>
    <content type="html"><![CDATA[<h3>My &ldquo;Learning&rdquo; Workflow</h3>

<p>As I wrote about <a href="http://ethanp.github.io/blog/2015/08/06/how-apm-originally-worked/">before</a>, I have developed an interesting method of learning
from experts, which can be summarized as follows:</p>

<ol>
<li>Fork their repo on GitHub</li>
<li>Clone the repo locally and &ldquo;detach the <code>HEAD</code>&rdquo; to the &ldquo;inital commmit&rdquo;</li>
<li>Now repeat the following <code>while (curious)</code>

<ol>
<li>Open the working tree in an editor/IDE</li>
<li>If there&rsquo;s something runnable, run it</li>
<li>Understand everything going on in the working tree

<ul>
<li>Take hints from the commit message</li>
</ul>
</li>
<li>Advance <code>HEAD</code> one commit</li>
<li>View the diff from the previous commit</li>
</ol>
</li>
</ol>


<!-- more -->


<h3>SourceTree cannot handle this workload</h3>

<p>I have always used Atlassian&rsquo;s Git GUI called SourceTree for all of my Git
usage because it is a <em>great</em> application, but the fact is, it will not work
for the workflow above. SourceTree has to rebuild the list of commits <em>all the
time</em> (startingfrom the most recent), and when there are thousands of commits,
that can take about a minute. But since I&rsquo;m always operating at the beginning
of the reverse end of the commit log, using SourceTree is untenable. For
whatever reason they decided it was a better idea not to keep all these commits
in memory after they are loaded the first time. I&rsquo;m not saying that was a bad
decision, because my workflow here may be <em>atypical</em>.</p>

<h3>Git is a DAG pointing back in time</h3>

<p>From what I understand&mdash;which is not (yet) a whole lot&mdash;Git is a DAG of
&ldquo;snapshots&rdquo; of the state of your project. Each snapshot points to its parents.</p>

<p>In a typical case, you&rsquo;ll load a snapshot, edit your working directory, add the
changes into the staging area, and <strong>commit</strong> a new snapshot which equals the
previous snapshot, plus the staged changes. Now your new commit has <em>one</em>
parent: the previous snapshot.</p>

<p>A <strong>merge commit</strong> would have <strong>two parents</strong>: the previous commit on the
branch being committed to, and the previous commit on the branch being merged-
in.</p>

<h3>The Learning workflow flows the wrong way</h3>

<p>The Learning worflow would require pointers to the <em>next</em> commit, not just
back-pointers. So it doesn&rsquo;t quite fit the Git mold, and we require a
workaround.</p>

<p>That&rsquo;s where StackOverflow saves the day. <a href="http://stackoverflow.com/questions/2121230/git-how-to-move-back-and-forth-between-commits/23172256#23172256">Here</a> someone modified
a StackOverflow answer by someone else to a <em>related</em> question, and produced
wrappers that help you traverse back and forth between commits. I reproduce an
explicated and slightly simplified version below which may be added to your
shell config file.</p>

<p>```scala</p>

<h1>checkout prev (older) revision</h1>

<p>git_prev() {</p>

<pre><code># move HEAD "one" generation back along *this* branch
git checkout HEAD~1
</code></pre>

<p>}</p>

<h1>checkout next (newer) commit</h1>

<p>git_next() {</p>

<pre><code># git show ref:
#       show (commit-sha, ref-name) pairs for current-versions of all 
#       "refs"; i.e. tags, remote branches, and local branches
# 
# git show-ref -s HEAD:
#       get sha of latest commit on branch pointed to by HEAD
#
# BRANCH=...:
#       get the name of the branch HEAD is on
#
BRANCH=`git show-ref | grep $(git show-ref -s HEAD) | sed 's|.*/||' | grep -v HEAD | sort -u`

# get the hash of the latest commit on the current branch
HASH=`git rev-parse $BRANCH`

# git rev-list --topo-order HEAD..$HASH:
#       list all commit sha's in order on the current branch from
#       HEAD until now 
#
# @return the commit sha for the commit after HEAD on branch
#
PREV=`git rev-list --topo-order HEAD..$HASH | tail -1`

# move head to the next commit
git checkout $PREV
</code></pre>

<p>}
```</p>

<p>With that knowledge in tow, I also made a little command to jump to the <em>i</em>&lsquo;th
commit on master. If you&rsquo;re trying to jump to the <em>i</em>'th commit on the current
branch, get the current branch using the <code>BRANCH=...</code> code above, and pass it
to <code>rev-list</code>.</p>

<p>```scala
gitj() {</p>

<pre><code>git checkout `git rev-list master | tail -n$1 | head -n1`
</code></pre>

<p>}</p>

<p>$ gitj 1    # jump to initial commit of master
$ gitj 3    # jump to third commit
```</p>

<h3>Wrappin it up</h3>

<p>So yeah, now the workflow is simpler to use and it was made possible by gaining
a better understanding of how Git works.</p>
]]></content>
  </entry>
  
</feed>
