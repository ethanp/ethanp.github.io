<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-02-28T15:30:21-08:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Java Network Programming Fundamentals]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals/"/>
    <updated>2016-02-28T15:15:13-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals</id>
    <content type="html"><![CDATA[<p>Most of what I&rsquo;ve learned and discussed here comes from <em>TCP/IP Sockets in
Java</em>, a highly recommended book about this stuff by Calvert and Donahoo. Some
of it also comes from <em>Java Network Programming</em> by Elliotte Rusty Harold.</p>

<h2>Overview</h2>

<ul>
<li>The <em>only</em> transport-layer protocols Java supports are TCP &amp; UDP; for
anything else, you must link to native code via the Java Native Interface</li>
<li>TCP uses <em>stream</em> sockets, through which one generally just writes to an
<code>OutputStream</code> and reads from an <code>InputStream</code> of bytes that remain in-order
and uncorrupted and are (practically) guaranteed delivery by the
implementation of the protocol by the operating system.

<ul>
<li>Unless you&rsquo;re using NIO; see below for more on that</li>
</ul>
</li>
<li>UDP uses <em>datagram</em> sockets, through which you <code>send</code> and <code>receive</code> objects
called <code>DatagramPacket</code>s, which are just a length, a destination, and data</li>
<li>Unless you&rsquo;re using NIO, everything <em>blocks</em>: e.g. connecting to servers,
listening for clients, reads, writes, and disconnecting (for TCP)

<ul>
<li>By default most of these actions may block <em>indefinitely</em></li>
<li>For reading and connecting, you can configure a timeout, after which you
will receive an <code>InterruptedIOException</code></li>
<li>For <em>writing</em> to a TCP stream, you <em>cannot</em> configure a timeout</li>
</ul>
</li>
</ul>


<h3>Handling multiple clients</h3>

<ul>
<li>Deal with one at a time, which is simplest, especially if there&rsquo;s some state
that is shared by all potential clients. Speed may become problematic
quickly.</li>
</ul>


<p>```java
void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    handle(s);
}
</code></pre>

<p>}
void handle(Socket s) {</p>

<pre><code>InputStream in = s.getInputStream();
// process request, etc.
s.close();
</code></pre>

<p>}
```
* Create a new thread to handle each incoming client. This is still pretty
  simple, but will lead to massive overhead if you have many concurrent
  clients, and therefore you&rsquo;re context-switching all the time.</p>

<p>```java
void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    new Thread() {
        @Override public void run() {
            InputStream in = s.getInputStream();
            // process request, etc.
            s.close();
        }
    }.start()
}
</code></pre>

<p>}
```</p>

<ul>
<li>Use a thread pool to handle requests. Java has abstracted the thread pool
concept into the <code>Executors</code> factory class. There are a multitude of
executors to choose from. This <code>newCachedThreadPool()</code> one will execute each
task on an existing thread if one is idle, and will create a thread
otherwise. Threads sitting idle in the cache for over one minute are
terminated.</li>
</ul>


<p>```java
ExecutorService executor = Executors.newCachedThreadPool()</p>

<p>void mainLoop() {</p>

<pre><code>while (true) {
    Socket s = serverSocket.accept();
    executor.execute(new TheHandler(s));
}
</code></pre>

<p>}
static class TheHandler implements Runnable {</p>

<pre><code>Socket s;
public TheHandler(Socket s) { this.s = s; }
@Override public void run() {
    InputStream in = s.getInputStream();
    // process request, etc.
    s.close();
}
</code></pre>

<p>}
```</p>

<ul>
<li>Use NIO (rather complicated) to allow <code>N</code> threads to service <code>M</code>
clients, where <code>N</code> is small and <code>M</code> is huge. This uses event-based
programming. We can set all network operations to be non-blocking, and
only wait as long as we want to for them. An extensive example can be
found below.</li>
<li>Use a framework like Netty, Akka, etc. that wraps the NIO stuff up in a
ribbon and a tie</li>
</ul>


<h3>10K feet above NIO</h3>

<!-- more -->


<ul>
<li>If you&rsquo;re using NIO, you create <code>Channel</code>s of bytes into and out of sockets
(or file handles)</li>
<li>You register a <code>Selector</code> to be notified when the <code>Channel</code> is ready to be
read from or written to</li>
<li>You query the <code>Selector</code> to tell you which <code>Channel</code> are ready, and may then
take action on those that are</li>
<li>You get data in and out by passing a <code>Buffer</code> to the <code>Channel</code></li>
</ul>


<p>Here&rsquo;s an example based on TCP/IP Sockets in Java, a highly recommended book
about this stuff by Calvert and Donahoo.</p>

<p>```java
Selector slctr = Selector.open(); // factory
ServerSocketChannel chnl = ServerSocketChannel.open(); // factory
chnl.socket().bind(inetAddr); // set address to listen on</p>

<p>// For some reason Channels block by default. If we want to
// register with the Selector for notifications, we must turn
// that off.
chnl.configureBlocking(false);</p>

<p>// Notify Selector whenever this Channel has a new connection
// ready to be &ldquo;accepted&rdquo;. Such a notification still does
// <em>not</em> guarantee it will work immediately.
chnl.register(slctr, SelectionKey.OP_ACCEPT);</p>

<p>while (true) {</p>

<pre><code>// wait configurable period of time to be notified
// by any registered channel
int numNotifications = slctr.select(timeoutMS);
if (numNotifications == 0) {
    // We timed out without any notification.
    // We could do whatever we want here because we're
    // no longer blocked.
} else {
    // numNotifications different channels have notified us of
    // being available for Connect, Read, Accept, or Write.
    // It is OK to use these keys in concurrent threads.
    for (SelectionKey key : slctr.selectedKeys()) {
        // We're not sure which channel this key belonged to.
        // Also, notification was just a "hint" and we need to
        // check again whether the Channel is available.
        if (key.isAcceptable()) {
            // here's the actual call to accept()
            SocketChannel clientChnl =
                ((ServerSocketChannel) key.channel()).accept();

            // similar to the ServerSocketChannel
            clientChnl.configureBlocking(false);
            // Except that here we register to notify Selector
            // about being "readable", and
            clientChnl.register(
                key.selector(),
                SelectionKey.OP_READ,
                // We must associate an "attachment" with this
                // channel. This is the buffer that will be
                // filled with the incoming bytes rcvd via TCP.
                ByteBuffer.allocate(NUM_BYTES) // eg 256?
            );
        }
        if (key.isReadable()) {
            // retrieve the readable client socket's channel
            SocketChannel client =
                (SocketChannel) key.channel();

            // retrieve the ByteBuffer we associated with
            // that channel
            ByteBuffer buf = (ByteBuffer) key.attachment();

            // Attempt to read `buf.remaining()` bytes _from_
            // the Channel _into_ the ByteBuffer.
            int bytesRead = client.read(buf);

            // -1 from read() means end-of-stream, which in
            // this case means the client closed their output
            // side of the TCP connection. We may still be
            // able to send data if that side of the connection
            // has not been closed yet.
            if (bytesRead == -1) client.close();

            else if (bytesRead &gt; 0) {
                // if our application has data to write back
                // to the client, we must tell the selector
                // that we've now become interested in writing
                key.interestOps(SelectionKey.OP_READ
                                | SelectionKey.OP_WRITE);
            }
        }
        // socket not closed, and is writable
        if (key.isValid() &amp;&amp; key.isWritable()) {
            // beyond the scope of this post.
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>Tips for Traps</h2>

<ul>
<li>Don&rsquo;t write to the network through a <code>PrintStream</code>

<ul>
<li>It chooses end-of-line chars based on your platform, not the protocol
(HTTP uses <code>\r\n</code>)</li>
<li>It uses the default char encoding of your platform (likely UTF-8), not
whatever the server expects (likely UTF-8)</li>
<li>It eats all exceptions into this <code>boolean checkError()</code> method, when
you&rsquo;re better off just using the normal exception hubbub</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very Basics of Jetty]]></title>
    <link href="http://ethanp.github.io/blog/2015/10/27/very-basics-of-jetty/"/>
    <updated>2015-10-27T09:09:50-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/10/27/very-basics-of-jetty</id>
    <content type="html"><![CDATA[<h3>Jetty has <em>cutting edge</em> HTTP/2 support</h3>

<p>For my Wireless Networking project, I&rsquo;m going to compare HTTP/1.1 and HTTP/2
with respect to performance metrics when talking to a mobile phone over the
cellular network. There are not so many <a href="https://github.com/http2/http2-spec/wiki/Implementations">implementations</a> of HTTP/2 right
now, and some of them seem a bit shaky. At the end of the day, it seems to me
that the easiest way to run this sort of experiment in a reliable fashion is to
use Java&rsquo;s <a href="http://www.eclipse.org/jetty/">Jetty</a> project. It has well-tested HTTP/1.1 support, many
heavyweight framework users, implements HTTP/2&rsquo;s server push and all sorts of
HTTP/2 negotation mechanisms, and I like static types.</p>

<h3>Jetty is hard to find tutorials for</h3>

<p>So I need to learn the basics of Jetty; and there&rsquo;s a lot to learn, and I
haven&rsquo;t found a stellar resource, so I&rsquo;ve been reading the <a href="http://www.eclipse.org/jetty/documentation/current/embedding-jetty.html">embedded
examples</a>, which are decent. I&rsquo;m usng &ldquo;embedded&rdquo; Jetty because that means
I can write type-safe Java rather than XML. Perhaps XML would be a good choice
for a long-standing app, but I&rsquo;m making a prototype and it&rsquo;s easier to just
write code.</p>

<p>Here&rsquo;s a brief overview of what I&rsquo;ve learned so far, which may come in handy
for someone else wanting to understand the very basics of Jetty (version 9).
This is not a detailed overview because I don&rsquo;t know what I&rsquo;m talking about.
I&rsquo;m just explaining the things I have learned from the tutorial linked above
and some mucking around.</p>

<!-- more -->


<h3>Jetty has a few large architectural components</h3>

<p>The main things you need to deal with in Jetty are <code>Server</code>s, <code>Handler</code>s, and
<code>Connector</code>s.</p>

<p>The <code>Server</code> manages your entire web site. It does this by connecting
<code>Connector</code>s to <code>Handler</code>s. The default <code>Connector</code>, <code>ServerConnector</code> responds
to vanilla HTTP/1.1 requests. If you try to make a request via <code>https</code> to a
<code>ServerConnector</code> without <code>https</code> support, in Chrome you will see the following
error message</p>

<p>```text
ERR_SSL_PROTOCOL_ERROR</p>

<p>Unable to make a secure connection to the server. This may be a problem with
the server, or it may be requiring a client authentication certificate that you
don&rsquo;t have.
```</p>

<h4>Handler</h4>

<p>You may want a chain of <code>Handler</code>s that will be tried one after another until
one is found to be appropriate for handling the current request</p>

<p><code>java
HandlerList handlers = new HandlerList();
handlers.setHandlers(new Handler[] { resource_handler, new DefaultHandler() });
</code></p>

<p>The <code>DefaultHandler</code> will simply return <code>404</code>s for everything. Jetty will keep trying <code>Handler</code>s in the list until one of them performs</p>

<p><code>java
baseRequest.setHandled(true);
</code></p>

<p>Looking at the <code>DefaultHandler</code>&rsquo;s source, we can see that indeed, in the
<code>handle</code> method, this is the <em>first</em> thing it does.</p>

<h4>Connector</h4>

<p>Each <code>Connector</code> instance can respond to a particular <em>protocol</em> at a
particular <em>host</em> on a particular <em>port</em>. So if you want to respond to <code>https</code>
requests as well as vanilla <code>http</code>, you&rsquo;re going to need another <code>Connector</code>.</p>

<h4>Routing</h4>

<p>A <code>ContextHandler</code> is used to do what in Rails would be called &ldquo;routing&rdquo;. This
is where you associate path&rsquo;s in the HTTP request header to the right
controller. After you&rsquo;ve created your <code>ContextHandler</code>s and set their
<code>contextPath</code>s, you need to do the following</p>

<p><code>java
Server server = new Server(8080);
//...
ContextHandlerCollection contexts = new ContextHandlerCollection();
contexts.setHandlers(new Handler[] { context0, context1, ... });
server.setHandler(contexts);
</code></p>

<p>This means the server is going to ask the <code>ContextHandlerCollection</code> for the
first <code>ContextHandler</code> that matches the path specified on the incoming request.</p>

<h3>Conclusion: Jetty feels dated compared to Ruby on Rails</h3>

<p>So far, I find Jetty surprisingly nice. I&rsquo;m
starting to appreciate the fact that it is written in Java and it is open
source. It&rsquo;s so different from Ruby on Rails and Node.js because there is not a
lot of magical mystery code running in the background whose source is difficult
to find. The advantage of those other frameworks is that they have much higher
level APIs. I find myself wrapping Jetty methods into my own methods that do
what in Rails would have been done automatically. Now I understand the draw of
Rails&rsquo;s &ldquo;convention over configuration&rdquo; and &ldquo;don&rsquo;t repeat yourself&rdquo;. I didn&rsquo;t
realize how much configuration and repeating yourself was necessary back in the
Java days. And that leads me to my next point, that writing Jetty feels like
writing 10 year old code. I wasn&rsquo;t coding 10 years ago, but I imagine you had
to explicitly wire every last thing together by hand over and over again, as
you do in Jetty.</p>

<p>Unlike Rails or iOS, basic Jetty is not a Model View Controller framework. It&rsquo;s
just handlers on a server, more like Node.js. Personally, I like MVC out of
ignorance because I assume people who came up with it thought the &ldquo;application
framework&rdquo; way of doing thigs was &lsquo;bad&rsquo;, and I tend to trust people who don&rsquo;t
like the &lsquo;old&rsquo; way of doing things. That said, I am not making a database based
application here so I will not evaluate this difference any further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating a Distributed System]]></title>
    <link href="http://ethanp.github.io/blog/2015/05/18/simulating-a-distributed-system/"/>
    <updated>2015-05-18T17:24:37-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/05/18/simulating-a-distributed-system</id>
    <content type="html"><![CDATA[<p>For my Distributed Computing class at school, there were 3 projects that each
involved implementing a distributed protocol over a simulated distributed
cluster of computers that are only &lsquo;connected&rsquo; to one another in that they know
each other&rsquo;s IP address and must communicate over TCP sockets. For each of the
3 projects, I had a <em>completely</em> different method of implementing the system.</p>

<h3>Implementation One: A True Distributed System in Vanilla Java</h3>

<p>The first project (Three Phase Commit) was the only one for which I worked with
a partner. We were unclear how to attack the problem of building a distributed
system in a simple way, so we went ahead and implemented a truly distributable
Java application, in which you could spin up processes on any computer and it
would connect in to the master server, who would tell the new node the
listening ports of other servers in the cluster manually, etc. This turned out
to be perhaps overly ambitious. When a node was expecting a message from
someone else, it would fire a timer thread, which on completion would report to
the master to restart the failed process. This system did work properly
(somehow) but it seemed to be living-on-the-edge. It also required two weeks of
a lot of working on it and learning aspects of Java, unit testing, mocks, which
<code>Exception</code> would get thrown by which network event &amp; when, etc.</p>

<h3>Implementation Two: Lightweight System Simulation</h3>

<p>For the second project (Paxos), I said &ldquo;Hooey&rdquo; to all the Java hubbub, which
while I enjoyed its low-level-ness, forcing me to peak further under the hood,
it required a larger time commitment than I was prepared to make. I realized
that my class&rsquo;s requirements only specified that system &ldquo;nodes&rdquo; run
concurrently, share no memory, and talk over TCP. So in Scala, I made a <code>Node</code>
class state machine, and ran different instances of it on separate threads.
This was too easy though, and I was disappointed to find my implementation
complete more than two weeks before the due date.</p>

<h3>Implementation Three: Akka Cluster</h3>

<p>Akka Cluster is a Scala-based framework for building a distributed system, in
which you define the address of a set of &ldquo;seed&rdquo; nodes, of whom at least one is
supposed be available at all times. Then when other nodes start up, they become
a &ldquo;member&rdquo; of the cluster by contacting any seed node. So for me (the &ldquo;client&rdquo;
of Akka Cluster), all there is left to do is define the protocol to run on top
of the cluster. (In this case the protocol was the simple eventually-consistent
database protocol &ldquo;Bayou&rdquo;.)</p>

<p>Akka nodes follow the &ldquo;Actor Model&rdquo;, meaning they share no state with any other
part of your program, making them &ldquo;simple&rdquo; to run on remote machines (I didn&rsquo;t
try that, the docs say it is easy though). The only way actors can communicate
is via message passing, for which there is a dedicated syntax, <code>!</code>. For
example:</p>

<p><code>scala
case class MyMessage(data: DataElem)
anotherActor ! MyMessage(theData)
</code></p>

<p>The code above would have the actor running this code, send <code>anotherActor</code> an
instance of the case class <code>MyMessage</code> with the <code>DataElem</code> that was passed in.</p>

<p>Inter-actor communcation is guaranteed <em>FIFO</em> by Akka, meaning that for any
pair of actors <code>A, B</code>, if <code>A</code> sends <code>n</code> messages to <code>B</code>, <code>B</code> will receive those
messages in the same order that <code>A</code> sent them. NB this says nothing about the
order with respect to other actors in the system.</p>

<p>Using Akka trivialized all sorts of implementation details I&rsquo;d had to worry
about in the first project, and then ignored for the second project.</p>

<p>If there had been a 4th project for this class, it&rsquo;s clear to me that I would
use Akka again. For some reason my code ran <em>very</em> slowly, and it probably had
to do with some configuration-setting that I did not set in the Akka config
file. That was really the only problem I had that I did not fix. One problem I
did fix that took a while, was figuring out a good way to shut the system down.
There were various options discussed online, and eventually I found one that
worked for me, which was to call <code>system.shutdown()</code> on every instance System I
instantiate. Another option was to send <code>self ! PoisonPill</code> but for some reason
that didn&rsquo;t work. I guess different ones work for different situations.</p>
]]></content>
  </entry>
  
</feed>
