<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deployment | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/deployment/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-06-23T00:55:20-07:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is a Rails Application]]></title>
    <link href="http://ethanp.github.io/blog/2016/04/09/what-is-a-rails-application/"/>
    <updated>2016-04-09T14:47:14-07:00</updated>
    <id>http://ethanp.github.io/blog/2016/04/09/what-is-a-rails-application</id>
    <content type="html"><![CDATA[<h1>What is a server and how does it relate to my Rails app?</h1>

<p>I learned the basics of Ruby on Rails web application development a few years
ago. At that time, my understanding how that system works was as follows</p>

<ol>
<li>Find articles describing things Rails allows you to do easily</li>
<li>Decide on an app that requires only those things</li>
<li>Follow the instructions in those articles to implement your app idea</li>
<li>Push the app to Heroku</li>
<li>Now the app is accessible to anyone on the World Wide Web</li>
</ol>


<p>The fact that it is <em>so</em> easy to do such a thing is nothing short of magical.
Especially while you have <em>no idea</em> how any of it works. Now that I am
slightly more knowledgeable about how software systems are put together and
deployed, I&rsquo;d like to take a slightly more nuanced stab at what really was
going on when the above 5 steps were executed.</p>

<!-- more -->


<h2>How Rails makes things so easy</h2>

<p>Ruby on Rails was created out of frustration with &ldquo;heavyweight&rdquo; web
application development frameworks, such as ones from the late 90&rsquo;s that use
Java. It gives you base-classes for all the important parts of your program so
that you only need to write (and even <em>see</em>) code for the pieces that are
unique to your system. It generates a base project with everything you need
already included in a well-structured layout that helps you make sense of what
is going on. Through some clever usage of the Ruby programming language, it
creates methods named after the components you implemented, and makes them
available in the places you may need them. This has led to a culture of
natural-language inspired community-built APIs that enable you to easily do
things only the most modern websites have.</p>

<h2>How does traffic get into and out of Rails?</h2>

<p>Maybe there is another way to do it, but at least by default Rails uses Rack.
Rack is a &ldquo;webserver interface&rdquo;. A Rack application has a Ruby object that has
a method that receives parsed HTTP requests in a well-specified format, and
then calls a method (called <code>call</code>) which receives the parsed HTTP request as
a Ruby object, and returns a parsed HTTP response in a well-specified format
(specifically a Ruby array structured like <code>[response_code, {headers_map},
[body_lines]]</code>).</p>

<p>A Rails application implements Rack&rsquo;s <code>call</code> method. What that <code>call</code> method
actually returns for any given HTTP request argument is defined by all your
Rails code, e.g. your router, controllers, models, views, etc.</p>

<h3>What about Rack then?</h3>

<p>Fine, now we understand that Rack passes the HTTP request to Rails, and Rails
returns the HTTP response to Rack. But how did Rack get the HTTP request in
the first place? Answer: from a Web Server.</p>

<p>A web server suitable for Rack would be a program that</p>

<ul>
<li>listens on a TCP port</li>
<li>connects to clients on that port</li>
<li>receives the HTTP requests from those clients</li>
<li>parses them into the format that Rack expects</li>
<li>Calls the Rack method <code>call</code> using that format</li>
<li>Receives the HTTP response from Rack</li>
<li>Converts that into the raw HTTP response format</li>
<li>Sends the response to the client</li>
</ul>


<p>There are many such suitable web servers, such as Unicorn and Thin.</p>

<h3>So what is nginx?</h3>

<p>It seems to me that one does not typically use nginx to call Rack&rsquo;s <code>call</code>
method (though this might be possible to do). One typically uses nginx as a
waypoint of traffic bound for the application, but in need of some sort of
pre-processing. That pre-processing could take multiple forms. Maybe there is
a cache sitting outside of Rails itself, and nginx can be setup to return
results from the cache instead of proxying requests into the server which
interacts with Rails itself. This will improve performance for each client who
hits such a cache, and will increase the load the system is capable of
supporting overall. Nginx might know of multiple servers connected to
different instances of the Rails app running concurrently, and will choose
which server to send each request to in such a way as to distribute load
across the Rails applications (&ldquo;load balancing&rdquo;). Nginx might &ldquo;terminate SSL&rdquo;,
meaning that clients connect to the address on which nginx is listening, and
will send their request to nginx over the TLS protocol, but nginx will decrypt
that request before passing it wherever it will go next; then nginx will
encrypt the response according to the TLS state and the client will know how
to decrypt the response (and ideally no one else will know how to decrypt it).</p>

<h2>What Heroku does</h2>

<p>Using the simple <code>git push heroku</code> workflow, Heroku takes care of all the
aspects of managing the deployment of your Rails server. It will provide a
virtual server to run your Rails code. It will provide a server which speaks
Rack to receive requests, invoke your Rails code, and return the response to
the client. It has DNS entries installed in the relevant places on the
internet so that you can choose a name for your app to be accessed by your
friends in their homes using their browsers. It will do a whole lot more, such
as autoscaling, caching, and other things beyond the scope of this post
because I don&rsquo;t know about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple First Deployment]]></title>
    <link href="http://ethanp.github.io/blog/2016/04/09/simple-first-deployment/"/>
    <updated>2016-04-09T13:45:39-07:00</updated>
    <id>http://ethanp.github.io/blog/2016/04/09/simple-first-deployment</id>
    <content type="html"><![CDATA[<p>I just had my first experience of &ldquo;deploying my system into production&rdquo;. I
have been learning about software engineering for a few years now, and I have
seen this term &ldquo;deploy into production&rdquo; many times, but never experienced it
myself. The &ldquo;software system&rdquo; that was deployed is an internal tool, almost 3
months in development by yours truly. This article is a retrospective of the
development of this system so far.</p>

<!-- more -->


<p>The system itself uses many APIs with which I was previously unfamiliar;
Kafka, Elasticsearch, HDFS, ZooKeeper, Spray, CouchDB, etc.; but I have glued
together unfamiliar APIs on many previous occasions. The system is
&ldquo;distributed&rdquo; and has in-built fault-tolerance in various ways; but I have
included that feature in previous projects. The thing that is new for me about
this project is that it was written with maintainability as a goal, and
&ldquo;released&rdquo; in such a way that it runs continuously as a service, and its
output can serve as input for the daily work of other human beings. This is my
first project for my first job, and it is finally working.</p>

<p>There were <em>many</em> times during the development of this project when I figured
it would probably be deployed within the next few days. At those points, I
told my manager to begin finding me something interesting to work on next. He
always sounded more skeptical than I expected about the project actually being
nearly done. On each of those occasions, I realized within the next few hours
after announcing my near-completion, that there was still, in fact, a <em>slew</em>
of components still needing to be worked out before the software could be
deployed, and that I had <em>no idea</em> how to craft any of these components.</p>

<p>There are <em>too many</em> guides out there about how to develop and deploy software
systems. For me, the most important ended up being <a href="https://medium.com/@jlouis666/how-to-build-stable-systems-6fe9dcf32fc4">a Medium article</a> by
Jesper L. Andersen (no idea who that is). I think I found the article on Hacker
News a month and a half ago. I will summarize my takaways from it</p>

<ul>
<li>The developer is responsible for every aspect of the software</li>
<li>Make sure the project makes sense to tackle</li>
<li>Choose the right libraries, frameworks etc. to use

<ul>
<li>This requires a small amount of experimentation which should be done up
front in a separated/extracted code-base</li>
</ul>
</li>
<li>Limit scope

<ul>
<li>E.g. create a list of problems you&rsquo;re <em>not</em> solving</li>
</ul>
</li>
<li>Limit external dependencies</li>
<li>Create a transition plan from the previous system to the new one</li>
<li>Design for future extension</li>
<li>Prefer correctness and elegance to efficiency of execution

<ul>
<li>This is especially true for my project because it is network bound anyway</li>
<li>But still, understand which parts must be more correct than others</li>
</ul>
</li>
<li>Collect metrics about system performance</li>
<li>Write automated tests of whether

<ul>
<li>The components that need to do something correctly are</li>
<li>The different components of the system can communicate with each other
effectively</li>
</ul>
</li>
</ul>


<p>There are still aspects of my system that are not perfect. For example, I
occasionaly see errors about a timeout in some library used by a library I am
using. I don&rsquo;t know whether those errors are corrupting my data, or killing
JVM threads, or whatever else. The system is already a vast improvement over
what was in place before in terms of correctness and latency of the data
produced, so having the occasional issue was not a good enough reason to delay
deployment any further.</p>

<p>The system was deployed in a manner one might describe as &ldquo;by hand&rdquo;. I rsync
the code onto a server, build the code on the server, open up two <code>tmux</code>
windows, run one JVM which produces to Kafka, run another JVM which consumes
from Kafka, make sure everything that is <em>supposed</em> to be happening <em>is</em>
happening, and detach from tmux. According to the blog post I linked above, it
is desirable to be able to hit a button and see it deploy itself
automatically. In my case this conflicts with the other suggestion in that
article, which is to stick to limit the number of things you have to learn in
order to get the first version of your software working, which I believe the
author meant to be more important than a one-click deployment scheme.</p>

<p>The system is not exactly &ldquo;done&rdquo; in the sense that it doesn&rsquo;t have all the
features it is supposed to have. But at least I know now that the system works
in its production environment and is able to interact successfully and
(demonstrably) correctly with all the external infrastructure that it relies
upon. But to be sure, many corners were cut, many pieces are <em>kind of</em> there
but not really, the metrics are not collected well, and configurations (e.g.
of Kafka, ZooKeeper, and Elasticsearch) were chosen on a &ldquo;that&rsquo;ll probably get
us running&rdquo; basis. As it turns out, there have already been issues with
Elasticsearch not being able to handle the load of multiple of my colleagues
querying it at once.</p>

<p>A problem with having deployed it without a larger share of the issues worked-
out is that I now need to be more careful to make my changes behave as
transitions from &ldquo;working state&rdquo; to &ldquo;working state&rdquo;. There are pieces of the
system that if they are left not-working for more than 24 hours, data will be
irretrievably lost, and people will be sad. But by design of the software, the
piece that <em>must</em> be left running properly is mostly disentangled from the
rest of the system, so that it can run while the rest of the system is
offline, and none of the data will be lost. This is accomplished by buffering
data in Kafka.</p>

<p>Since I have no previous experience deploying a software system like this, I
did not have a good basis to evaluate which libraries to build my system upon,
except for the buzz that I see on Hacker News, and my own intuition and
background. I like the Scala programming language best, and because of Spark,
some people I work with already use Scala, so I chose Scala. Is Go a better
tool for the job? According to the relative buzzes of the two ecosystems on
Hacker News, maybe it is. Would Docker have provided a better mechanism for
deployment? Most-likely it would have, but that can be added at any time if it
turns out that deployment is a <em>problem</em> which needs to be <em>solved</em>, which at
this simple stage, it is not.</p>

<p>It is exciting to final have real people relying on code that I wrote. I am
excited to continue making this system better-meet the needs of its users. I
am even more excited by the shift in the way I look at writing software now
that I have seen more of the lifecycle of a single project.</p>
]]></content>
  </entry>
  
</feed>
