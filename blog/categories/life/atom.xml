<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Life | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/life/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-06-23T00:55:20-07:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asking for Advice]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/27/asking-for-advice/"/>
    <updated>2016-02-27T15:38:06-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/27/asking-for-advice</id>
    <content type="html"><![CDATA[<p>There are many circumstances in life during which one may feel the need to ask
for advice. For example, when evaluating a significant decision, or when
dealing with an emotionally stressful circumstance. Here, I will discuss
advice about significant decisions.</p>

<p>In giving advice, everyone has a different approach. I generally try to follow
a line I heard in a rap song by The Streets, &ldquo;If you never tell a lie to her,
you don&rsquo;t have to remember anything.&rdquo; In other words, lying will only
complicate your life because you have to remember the lies you made up.
(Caveat: this may not always the best way to go for emotionally complex
issues.) I also enjoy helping people rationally and realistically evaluate
their options for significant decisions, and surely if someone recalls that
your input was helpful in the past, they will be more likely to ask you in the
future.</p>

<p>Most people I know don&rsquo;t seem to like giving useful advice. It seems they
either are (1) too afraid that their honesty will lead you to dislike them, or
(2) they feel so stressed with their own issues that taking on yours for a few
minutes would be overwhelming, or (3) they find your problem uninteresting and
simply have better things to do.</p>

<p>But some people are the opposite. They will patiently listen to your question
and give what they feel to be an honest evaluation of where you stand and what
you should do. The advice of people in this category will often be heavily and
obviously biased by their own experience and ideology. This is simply a
symptom of &ldquo;being honest&rdquo;.</p>

<p>So if you want good advice, it would be ideal to find someone who is honest,
not stressed about a similar problem to yours, as well as interested in and
knowledgeable of the subject; they should generally also be disinterested in
your particular problem. However, this ideal candidate is not always
available.</p>

<!-- more -->


<p>In that case one can obviously try the timeless &ldquo;pros vs cons&rdquo; list, which
doesn&rsquo;t necessarily rely on external sources of wisdom, but often external
sources of wisdom are critical. One can ask unideal candidates for advice, and
maybe they&rsquo;ll at least have some curt nugget that has some use. That&rsquo;s what I
usually do, and it is generally not effective at all, but occasionaly that
curt nugget is exactly the required pithy jewel.</p>

<p>One can consult the Internet, but I kind of assumed that if you needed advice,
you already checked the Internet for answers. But to go one step further you
can <em>ask</em> the Internet, treating it like this all knowing Oracle. This will
work to varying degrees depending on your problem. If your problem is one that
everyone and their mother has an opinion on, you will end up sifting through
junk answers, and may or may not get anything useful. In that case, the more
details you can reveal, the more benefit you will obtain. Of course <em>where</em>
you ask matters: for example Quora will be more effective than Yahoo Answers.
If your problem is esoteric, <em>find the people who are into that thing</em>.</p>

<p>For example, I have noticed to my surprise that StackOverflow/StackExchange is
not always the best place for all programming-related questions, because if
your question is esoteric to one technological ecosystem, the question-
answering population on StackOverflow won&rsquo;t necessarily have the flag-bearers
of the cause of that particular ecosystem. But if it really is an ecosystem,
it will have a place where the flag-bearers dwell, so <em>find it</em> and they will
probably help. In my experience, IRC channels tend to be empty; Gitter
channels may be well-attended; Github issues get a lot of flak for being a
mess, but are often effective if you&rsquo;re sure your question isn&rsquo;t stupid;
mailing lists can be high-latency but that&rsquo;s often where the true experts of
super-technical projects converse. Following <strong>good forum-question-asking
practices</strong> is <em>crucial</em> in <em>any</em> of these environments, and it can be
trickier to do that than it sounds. <strong>The better you phrase your question, the
more appealing it is to answer in the eyes of a high-quality potential source
of advice.</strong></p>

<p>Sometimes the advice you receive from multiple sources will be in direct
conflict with each other. I have been having this issue a lot lately. Let&rsquo;s
say one person suggested I do <code>A</code>, and another suggested I do <code>not A</code>. I have
decided this pair of suggestions implies that <em>either</em> decision is just fine,
which is basically the ideal outcome; viz. my so-called &ldquo;significant decision&rdquo;
was not so significant after all and doesn&rsquo;t not need to be balanced
carefully.</p>

<p>Just some biased thoughts from my experience; take some, leave some, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning vs Doing]]></title>
    <link href="http://ethanp.github.io/blog/2015/12/19/learning-vs-doing/"/>
    <updated>2015-12-19T14:05:20-08:00</updated>
    <id>http://ethanp.github.io/blog/2015/12/19/learning-vs-doing</id>
    <content type="html"><![CDATA[<p>The goal of my first project at my first &ldquo;real&rdquo; job is to get something useful
done within a few days and start to feel like a contributing member of the
team. However it has been about a week, and I still have not finished that
project.</p>

<p>From my experience talking with some of my colleagues so far, their collective
attitude might be summed up with, &ldquo;Google it, then copy-paste it, but don&rsquo;t
worry about what it does.&rdquo; In my life, I have worked with and met <em>many</em> people
having that attitude. Partially because of my experience working with those
people, it happens to decidedly <em>not</em> be <em>my</em> attitude. My attitude is more
like &ldquo;google it, learn what to do, learn why that is the right approach, take
notes, and then copy-paste and modify the best solution to make the final
solution as clean as possible.&rdquo; This strategy got me through many tough
situations, so I have built up faith in it.</p>

<p>So, after seeing me spend <em>days</em> learning about ssh tunnelling, ansible, and
vagrant &mdash; and not finishing my simple project &mdash; they finally said something
along the lines of</p>

<blockquote><p>At this rate it will take you weeks to learn how to automate deployment of a
virtual machine. Why don&rsquo;t you just deploy <em>one</em> copy and then learn about
how to automate it on your <em>own</em> time?</p></blockquote>

<p>Now, &ldquo;weeks&rdquo; is probably an overstatement, but they pointed out to me that I
had sort of assumed out of nowhere that I was hired as some sort of devops role
for the company, even though what I&rsquo;m actually interested in is what one might
call &ldquo;big data engineering&rdquo;. They said, &ldquo;<em>If</em> you find yourself repeating the
same tasks over and over, <em>then</em> you should learn to automate them.&rdquo; It is now
obvious that they are in the right.</p>

<p>At the time, I was startled by the way they approached me about what I consider
to be largely a difference in personalities. But I can see that they are
concerned that someone who reads too much never gets anything done, and so far
I have fit that stereotype. At the same time, I am concerned that a person who
<em>doesn&rsquo;t</em> read will do their work quickly and incorrectly and will then spend
the next few weeks rejiggering a broken project, and so far they have fit that
stereotype. In short, it seems that we are all prejudiced and have plenty to
learn from each other.</p>

<p>Going forward I shall take their advice and do the more mundane tasks as fast
as possible and only learn things that come up more than once. If that doesn&rsquo;t
work out for me because I&rsquo;m just cranking out shitty work, I will revert back
to understanding what I am doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learnt About Collaboration]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration/"/>
    <updated>2015-07-22T21:16:25-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest lesson of this summer has been in taking advantage of the
power of collaboration.</p>

<p>When my boss decided to hire me, he told me that it was in large part because
of my communication skills. I don&rsquo;t know if he still agrees with this, but I
like to think it is true.</p>

<p>One of my greatest prides is the ability to openly lose an argument. For a long
time, this has quite often been my reason for entering an argument, and I try
to make it easy to lose. If someone seems to know they&rsquo;re right, we must
together find the bridge of what I&rsquo;m missing that will be convincing beyond a
reasonable doubt of their correctness. Making it easy to lose means figuring
out what you <em>actually</em> think, making that clear, and not wavering from that
initial point of view even when more facts come to light. Or at least
acknowledging that the original viewpoint was incorrect, and now <em>this</em> is what
I [honestly] believe to be true. A regrettable human tendancy is to change
one&rsquo;s opinion during an argument as the facts come to light because &ldquo;with these
facts, my original point of view was wrong, and clearly I wasn&rsquo;t wrong, so that
couldn&rsquo;t have been my real point of view.&rdquo; This needs to be consciously
avoided.</p>

<!-- more -->


<p>But still, I haven&rsquo;t always taken advantage of opportunities to collaborate.
There is a lot of overhead when working with a partner. A lot of your time is
spent explaining to them stuff you already know. These could be things which
took quite a while of staring at text trying to understand, and now it feels
like you&rsquo;re letting them off the hook by just explaining it outright. Sometimes
there are petty disagreements in which I like to code things my way and she
hers, etc.</p>

<p>One small example is that in one project I wanted the code for a very
complicated function to have the following structure</p>

<p>```scala
def complicated1() {</p>

<pre><code>val precondition1 = state1 != invalid &amp;&amp; state2 != invalid
val precondition2 = state3 != invalid || state4 != invalid
val preconditionsMet = precondition1 &amp;&amp; precondition2
if (!preconditionsMet) {
    logError("error 1")
    return // early escape
}
val computationResult = doSomeComputing()
if (!isValid(computationResult)) {
    logError("error 2")
    return // another early escape
}
// the main logic here
</code></pre>

<p>}
```</p>

<p>whereas my partner wanted something more along the lines of the following</p>

<p>```scala
def complicated2() {</p>

<pre><code>if (state1 != invalid &amp;&amp; state2 != invalid
 &amp;&amp; (state3 != invalid || state4 != invalid)) 
{
    val computationResult = doSomeComputing()
    if (isValid(computationResult)) {
        // the main logic here
    }
    else {
        logError("error 2")
    }
}
else {
    logError("error 1")
}
</code></pre>

<p>}
```</p>

<p>It&rsquo;s a petty issue; either way the <em>exact</em> same code is going to execute, and
we each had very good reasons for finding our own way easier to understand. We
didn&rsquo;t bicker over it because we got along very well, and in the end we
actually did it my way. But in reality the actual function was considerably
more complex, and perhaps there were entirely better ways of structuring it
that neither of us noticed.</p>

<p>Now, at work, there is a new-hire considerably more senior and experienced than
I, who started 2 days ago, and who is taking over my project once I go back to
school in a few weeks; so it has been my responsibility to teach him how
everything works. Very often, he feels the need to obsessively ask me: &ldquo;Your
code that says <code>3 + 4</code>, that means you&rsquo;re adding 4 to 3, right?&rdquo; Sometimes he
says &ldquo;right?&rdquo; and I say yes, then he repeats what he said and I repeat &ldquo;yes,
you are correct&rdquo;, and this can continue and I wonder what he is getting out of
that.</p>

<p>At first I resented this because it sometimes felt like no one taught <em>me</em> much
about the codebase when I arrived; for the more complex bits, I just stared at
it until it clicked. This was fun to me, and no one ever seemed to have the
time to go in depth with it anyway. It was good practice at reading others'
code and understanding what it does. Learning new ways of accomplishing many
things that were unfamiliar. Getting used to seeing code that isn&rsquo;t formatted
<em>my way</em>, and accepting it for <em>what it is</em>. Learning how to utilize their code
from mine even when there is no explicitly exported clean API, and so forth.</p>

<p>But well it was the new-guy&rsquo;s day 3 today, and it seems we have really begun to
click as a duo. It is abundantly clear that he has a <em>wealth</em> of skills I lack.
Sure, he could definitely learn this code without my help, but I benefit a
great deal from seeing how he navigates it. What are the parts that he finds
especially confusing? The importance of variable names shines immediately
through. There are a few patches of code where I worked some Scala feature in
there just to try them out. Some of these turned out to be easier to understand
and reuse code from, and for some of them, something more cut-and-dry would
have been better.</p>

<p>Plus there&rsquo;s the fact that two minds are better than one. He&rsquo;s always
questioning my assumptions. To the point where he often straight up doesn&rsquo;t
believe what I say until I prove it. Sometimes he finds flaws in my arguments.
Sometimes, with my assumptions in hand, he invents better solutions to the
problem. Sometimes he understands what I did better than me and tells me its
advantages and disadvantages and alternatives.</p>

<p>My new partner&rsquo;s oft-stated goal is to get to a point where he can start
contributing to our project without my help, so that our concurrent efforts
will speed things along. People with a smart, helpful attitude like that have
been rare in my experience, so if he&rsquo;s being honest, I&rsquo;m all for taking him to
that place as quickly as I can.</p>

<p>I think maybe I just have a bias that everyone who doesn&rsquo;t know what I know
just wasn&rsquo;t smart enough to realize it. That is the thinking pattern of a real
asshole and this experience is making that abundantly clear. Everyone knows
that when learning something new, everything is always surprisingly confusing,
and then once it clicks, everything becomes &ldquo;trivial.&rdquo; However, I have not
spent much time teaching others, so I haven&rsquo;t had the opportunity to see this
&ldquo;click&rdquo; moment in others, and how dumb they all look before that moment occurs.
I do remember teachers explaining something, and me looking at it sideways in
confusion, and asking them to repeat it slower. This happened on many
occasions, and they must have thought I was a real idiot on each of those
occasions, but I was always so relieved when they did repeat, and I often would
strain my brain muscles and actually (partially) &ldquo;get it&rdquo; the second time
through.</p>

<p>The new-guy has taught me a lot from his attitude in joining a new team at a
new workplace. He&rsquo;s not trying to just &ldquo;set to work&rdquo; writing code willy-nilly
as quickly as possible. Compared to him, that&rsquo;s basically what I did. He wants
to <em>truly</em> understand what&rsquo;s going on. What does the architecture look like?
Who is the expert on what? Who is good at explaining things? Who is willing to
take the time to explain things? What do our users want? What do they expect?
What is the timeline? What has been built? What is he responsible for? What are
the alternative solutions that have been under consideration? Who has decision-
making power? Which teams do we collaborate with?</p>

<p>These are all questions that I know the answers to, as they are the necessary
fundamentals of how to operate and move forward. I started actively learning
the answers to these questions as soon as I arrived as well. However, I wasn&rsquo;t
as conscious and certainly not nearly as thorough at answering them as he is.
And over time I may have slipped a bit into a position of people trusting me to
do the right thing, so I don&rsquo;t feel as pressured to be on the ball with
everything at all times. But his arrival has been a reality check in the
importance of having a firm grip on the fundamentals of what are we doing and
why and how best to accomplish it in a strictly-business manner. There is no
excuse for losing one&rsquo;s professionalism, including having a &ldquo;casual&rdquo; workplace.</p>

<p>So far it has been 3 days. On a personal level of course I have learned more
during those 3 days of working with the new guy than I did during the previous
few weeks of working on my own. During this week I have probably also been
slower to accomplish those tasks remaining to finish before I leave. It is
firmly clear that this is a worthy tradeoff, and I will continue to spend the
rest of my time making sure that I am playing as great a part as possible in
his success in moving our project forward into the future. There maybe some
hiccups in our working relationship, because alas I barely know the guy, and
we&rsquo;re from different societal cultures, and my first impressions of people are
always notoriously off-base. However, now it is clear that the responsibility
is my own to make sure any future road-bumps are known to be my fault and my
problem and mine to fix with his help.</p>
]]></content>
  </entry>
  
</feed>
