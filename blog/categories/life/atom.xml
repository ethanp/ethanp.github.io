<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Life | With Pith]]></title>
  <link href="http://ethanp.github.io/blog/categories/life/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-10-09T20:10:53-07:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Learning]]></title>
    <link href="http://ethanp.github.io/blog/2016/10/09/on-learning/"/>
    <updated>2016-10-09T15:03:32-07:00</updated>
    <id>http://ethanp.github.io/blog/2016/10/09/on-learning</id>
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=Zjm8JeDKvdc">I like to learn things</a>, but I
often feel like time I spend learning things is wasted.</p>

<h3>It&rsquo;s hard to tell what info is going to be useful and what is fluff</h3>

<p>Classes in school (at all levels) often led me to a lot of wasted effort, because a lot of the stuff you&rsquo;re supposed to learn is simply not useful knowledge. People say: &ldquo;well just going through the process is teaching you how to think.&rdquo; But that&rsquo;s a fallacy; why don&rsquo;t you teach me how to think using stuff that&rsquo;s actually useful?</p>

<p>In college computer science classes, I quite often didn&rsquo;t understand <em>why</em> what I was learning was important. E.g. during my first Operating Systems course. I thought I would never end up needing anything I was learning in that class. Virtual memory, processes and threads, scheduling, networking, etc. I thought, &ldquo;This is way lower-level than anything I&rsquo;ll ever need to know.&rdquo; I had no idea what I was talking about.</p>

<p>What I wanted at that time was for the material to be motivated with an example, like, &ldquo;let&rsquo;s build a program for running a medical radiation machine."Now we&rsquo;re talking; we&rsquo;re going to need to get all the different low-level components right and make them fit together so that we can save lives!</p>

<p>What actually happened was similar in content, but not in objective. We were expected to read a very long and dry paper on the Therac-25, a radiation machine with concurrency issues that killed a few people in the 1980s. I spent a few hours trying to read the paper. One could say I was spending that time &ldquo;learning to think&rdquo;, but I think I spent that time &ldquo;getting nowhere&rdquo;. The whole time I was reading the paper, I was thinking: it would take me so long to get to the point of this paper, and I&rsquo;m not even going to get a whole lot out of it. No good. In the end I learned about the Therac-25 from Wikipedia, a source of information whose expected readership has a level of background knowledge more commensurate with my own. Then, a few years later, I had to read that paper again for a graduate operating systems class, and at that point I had sufficient background knowledge to simply read the paper and feel like I understood its content and learned important lessons about software engineering.</p>

<p>This example demonstrates the fundamental principle that the same content can lead to completely different learning outcomes for different people, and even for the same person at different points of time and (as we shall return to later) in different emotional moods.</p>

<h3>Some keys to not wasting effort</h3>

<ul>
<li>Have something in mind that you want to accomplish with your newly-obtained knowledge

<ul>
<li>E.g. &ldquo;I want to build the software for a medical radiation device&rdquo;</li>
</ul>
</li>
<li>Have someone (colleague) or some place (e.g. stack overflow) where you can ask questions when you get confused

<ul>
<li>Sometimes having another person just <em>explain the whole thing</em> in one shot face to face can lead you to simply <em>just get it</em></li>
</ul>
</li>
<li>Learn the relevant vocabulary for the field on wikipedia

<ul>
<li>For example take at least half an hour digging through linked topics until you have a general grasp of the various concerns and their names, and ideally how they relate to one another</li>
</ul>
</li>
</ul>


<!-- more -->


<h3>Qualities of time</h3>

<p>During college, I learned from <a href="http://www.aaronsw.com/weblog/productivity">an Aaron Swartz article</a> about how one can&rsquo;t just spend all day reading tough material because it&rsquo;s too mentally strenuous. Instead, you have to choose the right activity for the mood you&rsquo;re in, and there&rsquo;s not a whole lot you can do if you&rsquo;re just not in the mood to learn anything. Mr. Swartz says we should have a todo list that is aware of the fact that different tasks require different levels of mental effort. Maybe after reading my compilers textbook for an hour I&rsquo;m mentally tired and physcally peppy, so I go for a jog. Then I&rsquo;m relaxed and ready to work on writing code for a program. Then I&rsquo;ll get overwhelmed so I step back and plan out some next steps for the program. By now I&rsquo;m sick of the program so I meet some friends. Then I&rsquo;m tired and take a nap. And so on. The point is each activity follows from the next according to my current mental and physical state. So many people don&rsquo;t start the project until the night before, and have to do one strenuous activity all night, fighting exhaustion, and not really getting much out of it because it&rsquo;s all slapped together. Granted, plenty of people are really proficient at getting that strategy to work out. To me, it&rsquo;s pointlessly stressful, when I can just start the project on-time and finish way before the duedate, and move on with my life.</p>

<h3>Find the right source</h3>

<p>The main ways that I learn things are from youtube, conversations, podcasts, wikipedia, books, and blogposts. In terms of enabling lots of deep and useful knowledge to be gained per minute, reading a great book wins hands-down.</p>

<p>Finding a great book can be pretty challenging, because you may spend some time reading the wrong books. But it is worth it, because the right book can make a big impact. After looking for some time, I have finally found a <a href="https://www.amazon.com/Writing-Compilers-%20Interpreters-%20Software-%20Engineerin%20g/dp/0470177071/ref=sr_1_sc_1?ie=UTF8&amp;qid=1476048360&amp;sr=8-1-spell&amp;keywords=writ%20ing+compilers+and+interpretere">compilers book</a> from which I am learning what I wanted to know. And in reality, it&rsquo;s cover happens to be quite ugly compared to the other compiler books. Before that I tried reading a hundred pages of each of a few &ldquo;traditional&rdquo; (theoretical) books, but it turned out that instead of teaching the reader how to build a compiler, they taught me about the theory of building a compiler. At this point, I&rsquo;m more interested in reading code, over learning theory. The book I&rsquo;m reading is like a tutorial for building a Pascal compiler from scratch in Java, with real executable code that gets incrementally built up, working-state to working-state, each chapter. It&rsquo;s a very hands-on approach and by doing it that way, I&rsquo;ve learned a whole lot about how to code &amp; engineer complex systems. The point is I found a book that is teaching me what I want to know more efficiently than several other popular books on the subject. And I know that from having tried out the other books. I think this is a useful strategy in general.</p>

<p>I went through a similar process for learning the fundamentals of algorithms. First I took the class in school and got an A. I can&rsquo;t say that did me much good, as evidenced by failing many easy interview questions. I didn&rsquo;t go to class and would get someone else to hand in my homework for me. I learned everything I needed for the exams from the book called &ldquo;Algorithm Design&rdquo;, which was decently good. After failing at interviews, I started rotating through different algorithms books. I finally decided to read the whole explanatory section of &ldquo;The Algorithm Design Manual&rdquo;. I was able to complete many of the exercises but didn&rsquo;t feel like was walking away with a good grasp of the material it covered. So I tried to read &ldquo;CLRS&rdquo; from the beginning. After some time, I decided I wanted to focus on <em>implementing</em> algorithms instead of proving correctness and complexity bounds. So I started &ldquo;Algorithms&rdquo; by Sedgewick and Wayne. It started off pretty slow, so I found that by skimming, I was able to read a few hundred pages in the first few hours, which wasn&rsquo;t productive but motivated me to get into some more challenging material. So I skimmed up to a lot of material that I didn&rsquo;t already know (I think chapter 2 or 3). In addition to incredible explanations, book has clean code, amazing diagrams, easy, medium, and hard code and theoretical exercises, a full sequence of lecture videos by Dr. Sedgewick himself, etc. With this mix, I was finally able to achieve a satisfying learning per minute score. In general, I was able to just &ldquo;follow along&rdquo; with the book and understand things as they came. The whole time I was reading this book, whenever I found a concept hard to grasp, based on my bad experiences with other books and classes and tutorials, I could rest assured that it would be unlikely that I could find a better explanation elsewhere. This attitude strengthened my resolve, and I ended up reading and understanding almost everything in the book. Now I&rsquo;m realizing that this is all another example of how emotion plays into learning.</p>

<h3>Maybe it&rsquo;s just the tone</h3>

<p>I have always been deeply affected by the tone in which information is presented to me in turms of being able to remember it. So have you, just ask your parents. I&rsquo;ve had professors I couldn&rsquo;t stand teach me subjects I love and walked away with nothing from that class. And vice versa. Everyone knows that. It&rsquo;s the same with textbooks. In my experience, textbooks for programming and computer science have a <em><strong>way better</strong></em> tone than textbooks for <em>anything</em> else. They actually convey the excitement of it!, instead of simply boring you to tears with facts.</p>

<p>One thing the Khan Academy has brought to teaching is excitement for the actual content. The end result is that people (e.g. me) can actually bear to spend hours watching and re-watching him explain differential equations. He&rsquo;s doing a taylor series expansion, and he&rsquo;s like &ldquo;just check out how cool this is!&rdquo; and I&rsquo;m like &ldquo;yeah, expand that shit!&rdquo; Whereas otherwise I&rsquo;d be sitting at class at 8:30 in the morning like, &ldquo;FML I can&rsquo;t believe I&rsquo;m not sleeping right now&rdquo;.</p>

<h3>When to skim</h3>

<p>Most of the time, skimming material does not lead to understanding the material. Instead, it only leads to some kind of <em>awareness</em> of the material; that feeling later of &ldquo;yeah I think I&rsquo;ve seen this stuff before&rdquo;. That said, skimming is often crucial, especially for reading blogposts.</p>

<p>Blogposts may be written with any of an assortment of aims.</p>

<p>For example, the author may be trying to assert her expertise in an area by providing a good explanation, in order to further her career. Those vary widely in quality, and can occassionally be read deeply for understanding. Data science has a <em>huge</em> number of those.</p>

<p>Or the author may be trying to clear up his own thoughts on some subject. That&rsquo;s what I&rsquo;m trying to do here. In that case, skim to find the parts that are relevant or entertaining, and read those.</p>

<p>Or it may be written for the author to remember something, like &ldquo;how to get HDFS running locally on Mac&rdquo;. Thank heavens for such blogposts.</p>

<p>Or it may be some sort of <em>war story</em>: &ldquo;this is what we did, and this is how it worked out&rdquo;. If you&rsquo;re trying to build a complex system, you probably want to read some of those.</p>

<p>Lectures are generally only worth skimming. It takes me less effort to understand a lecturer than to understand a book. But even when it&rsquo;s clearly stated, the lecturer is generally not divulging much information, and when they start to say something actually complicated, it becomes easy to zone out, get lost, and lose interest. They may also get lost on side-tracks or try to pull things in that they think are cool. A great lecturer can be a very entertaining way of learning, but it&rsquo;s generally not time spent learning nearly as much substance as can be read from a page. Please note, hour long lectures are quite different from a super-helpful and targeted 5 minute youtube video.</p>

<p>One useful question to ask before reading something is &ldquo;Can I just skim it?&rdquo; The answer to this is yes if you <em>don&rsquo;t</em> want to be able to actively use that knowledge in the future. Often, skimming is useful for verifying that you understand something that you learned about elsewhere. For example, if I were to skim a tutorial on parsing theory, I would be able to roughly guage how much of that stuff I actually understand based on how much I&rsquo;m recognizing concepts and &ldquo;agreeing with the author&rdquo; as I skim.</p>

<p>A frustrating situation is to read something deeply when you could have just skimmed it because there was nothing really there. Maybe this can be avoided by skimming first to see whether it&rsquo;s even worth really reading. But I never do that.</p>

<p>Another time skimming is useful is when you&rsquo;re stuck. When I got stuck reading about computer architecture, I would go back to the table of contents. &ldquo;How did I get to where I am?&rdquo; &ldquo;Where are we going with this stuff?&rdquo; &ldquo;What do I find interesting about this?&rdquo; Then I would skip to some figures. Look at the figure. Is it cool looking? Wouldn&rsquo;t it be fun to understand what it means? Let&rsquo;s look at some of the keywords in the text near the figure. Oh there&rsquo;s some words I&rsquo;ve seen before but didn&rsquo;t understand, I guess they were important. Now I can go back to their definitions and see if I can place them properly in the figure. And so on.</p>

<h3>Is learning important</h3>

<p><strong>I believe that one of the most important things that learning provides is putting people in a position to be productive members of society.</strong> There&rsquo;s a lot of politics and assumptions wrapped up in that statement which I will not go into. Companies often want to trade my time and energy for their money. Not everyone is so fortunate to be in that position, but it&rsquo;s not because they&rsquo;re not capable. It is a state anyone can achieve if they are put in a situation in which they can learn effectively, which (at a college level) for me means having video lectures with a constructive tone, and reading great textbooks that don&rsquo;t get lost in the weeds every few pages. Obviously for a lot of people that alone is not going to cut it.</p>

<p>I am convinced that the overarching reason they want to trade my time for their money is because I have, over time, stashed away some knowledge into my brain in such a way that it is accessible to be linked together and molded to fit the constraints of their problems. (This is of course after applying preferential treatment because of my gender, race, class, and so on.)</p>

<p>So, I guess what I&rsquo;m trying to say is that by getting better at seeking out the best sources of information, I&rsquo;ve done what amounts to improving my ability to affix knowledge into my brain accessibly, without expecting the best educators to just to fall in my lap when I need them. I have tried to share some lessons about this above, mainly for my own benefit, but hopefully for someone else&rsquo;s benefit too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asking for Advice]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/27/asking-for-advice/"/>
    <updated>2016-02-27T15:38:06-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/27/asking-for-advice</id>
    <content type="html"><![CDATA[<p>There are many circumstances in life during which one may feel the need to ask
for advice. For example, when evaluating a significant decision, or when
dealing with an emotionally stressful circumstance. Here, I will discuss
advice about significant decisions.</p>

<p>In giving advice, everyone has a different approach. I generally try to follow
a line I heard in a rap song by The Streets, &ldquo;If you never tell a lie to her,
you don&rsquo;t have to remember anything.&rdquo; In other words, lying will only
complicate your life because you have to remember the lies you made up.
(Caveat: this may not always the best way to go for emotionally complex
issues.) I also enjoy helping people rationally and realistically evaluate
their options for significant decisions, and surely if someone recalls that
your input was helpful in the past, they will be more likely to ask you in the
future.</p>

<p>Most people I know don&rsquo;t seem to like giving useful advice. It seems they
either are (1) too afraid that their honesty will lead you to dislike them, or
(2) they feel so stressed with their own issues that taking on yours for a few
minutes would be overwhelming, or (3) they find your problem uninteresting and
simply have better things to do.</p>

<p>But some people are the opposite. They will patiently listen to your question
and give what they feel to be an honest evaluation of where you stand and what
you should do. The advice of people in this category will often be heavily and
obviously biased by their own experience and ideology. This is simply a
symptom of &ldquo;being honest&rdquo;.</p>

<p>So if you want good advice, it would be ideal to find someone who is honest,
not stressed about a similar problem to yours, as well as interested in and
knowledgeable of the subject; they should generally also be disinterested in
your particular problem. However, this ideal candidate is not always
available.</p>

<!-- more -->


<p>In that case one can obviously try the timeless &ldquo;pros vs cons&rdquo; list, which
doesn&rsquo;t necessarily rely on external sources of wisdom, but often external
sources of wisdom are critical. One can ask unideal candidates for advice, and
maybe they&rsquo;ll at least have some curt nugget that has some use. That&rsquo;s what I
usually do, and it is generally not effective at all, but occasionaly that
curt nugget is exactly the required pithy jewel.</p>

<p>One can consult the Internet, but I kind of assumed that if you needed advice,
you already checked the Internet for answers. But to go one step further you
can <em>ask</em> the Internet, treating it like this all knowing Oracle. This will
work to varying degrees depending on your problem. If your problem is one that
everyone and their mother has an opinion on, you will end up sifting through
junk answers, and may or may not get anything useful. In that case, the more
details you can reveal, the more benefit you will obtain. Of course <em>where</em>
you ask matters: for example Quora will be more effective than Yahoo Answers.
If your problem is esoteric, <em>find the people who are into that thing</em>.</p>

<p>For example, I have noticed to my surprise that StackOverflow/StackExchange is
not always the best place for all programming-related questions, because if
your question is esoteric to one technological ecosystem, the question-
answering population on StackOverflow won&rsquo;t necessarily have the flag-bearers
of the cause of that particular ecosystem. But if it really is an ecosystem,
it will have a place where the flag-bearers dwell, so <em>find it</em> and they will
probably help. In my experience, IRC channels tend to be empty; Gitter
channels may be well-attended; Github issues get a lot of flak for being a
mess, but are often effective if you&rsquo;re sure your question isn&rsquo;t stupid;
mailing lists can be high-latency but that&rsquo;s often where the true experts of
super-technical projects converse. Following <strong>good forum-question-asking
practices</strong> is <em>crucial</em> in <em>any</em> of these environments, and it can be
trickier to do that than it sounds. <strong>The better you phrase your question, the
more appealing it is to answer in the eyes of a high-quality potential source
of advice.</strong></p>

<p>Sometimes the advice you receive from multiple sources will be in direct
conflict with each other. I have been having this issue a lot lately. Let&rsquo;s
say one person suggested I do <code>A</code>, and another suggested I do <code>not A</code>. I have
decided this pair of suggestions implies that <em>either</em> decision is just fine,
which is basically the ideal outcome; viz. my so-called &ldquo;significant decision&rdquo;
was not so significant after all and doesn&rsquo;t not need to be balanced
carefully.</p>

<p>Just some biased thoughts from my experience; take some, leave some, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning vs Doing]]></title>
    <link href="http://ethanp.github.io/blog/2015/12/19/learning-vs-doing/"/>
    <updated>2015-12-19T14:05:20-08:00</updated>
    <id>http://ethanp.github.io/blog/2015/12/19/learning-vs-doing</id>
    <content type="html"><![CDATA[<p>The goal of my first project at my first &ldquo;real&rdquo; job is to get something useful
done within a few days and start to feel like a contributing member of the
team. However it has been about a week, and I still have not finished that
project.</p>

<p>From my experience talking with some of my colleagues so far, their collective
attitude might be summed up with, &ldquo;Google it, then copy-paste it, but don&rsquo;t
worry about what it does.&rdquo; In my life, I have worked with and met <em>many</em> people
having that attitude. Partially because of my experience working with those
people, it happens to decidedly <em>not</em> be <em>my</em> attitude. My attitude is more
like &ldquo;google it, learn what to do, learn why that is the right approach, take
notes, and then copy-paste and modify the best solution to make the final
solution as clean as possible.&rdquo; This strategy got me through many tough
situations, so I have built up faith in it.</p>

<p>So, after seeing me spend <em>days</em> learning about ssh tunnelling, ansible, and
vagrant &mdash; and not finishing my simple project &mdash; they finally said something
along the lines of</p>

<blockquote><p>At this rate it will take you weeks to learn how to automate deployment of a
virtual machine. Why don&rsquo;t you just deploy <em>one</em> copy and then learn about
how to automate it on your <em>own</em> time?</p></blockquote>

<p>Now, &ldquo;weeks&rdquo; is probably an overstatement, but they pointed out to me that I
had sort of assumed out of nowhere that I was hired as some sort of devops role
for the company, even though what I&rsquo;m actually interested in is what one might
call &ldquo;big data engineering&rdquo;. They said, &ldquo;<em>If</em> you find yourself repeating the
same tasks over and over, <em>then</em> you should learn to automate them.&rdquo; It is now
obvious that they are in the right.</p>

<p>At the time, I was startled by the way they approached me about what I consider
to be largely a difference in personalities. But I can see that they are
concerned that someone who reads too much never gets anything done, and so far
I have fit that stereotype. At the same time, I am concerned that a person who
<em>doesn&rsquo;t</em> read will do their work quickly and incorrectly and will then spend
the next few weeks rejiggering a broken project, and so far they have fit that
stereotype. In short, it seems that we are all prejudiced and have plenty to
learn from each other.</p>

<p>Going forward I shall take their advice and do the more mundane tasks as fast
as possible and only learn things that come up more than once. If that doesn&rsquo;t
work out for me because I&rsquo;m just cranking out shitty work, I will revert back
to understanding what I am doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learnt About Collaboration]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration/"/>
    <updated>2015-07-22T21:16:25-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest lesson of this summer has been in taking advantage of the
power of collaboration.</p>

<p>When my boss decided to hire me, he told me that it was in large part because
of my communication skills. I don&rsquo;t know if he still agrees with this, but I
like to think it is true.</p>

<p>One of my greatest prides is the ability to openly lose an argument. For a long
time, this has quite often been my reason for entering an argument, and I try
to make it easy to lose. If someone seems to know they&rsquo;re right, we must
together find the bridge of what I&rsquo;m missing that will be convincing beyond a
reasonable doubt of their correctness. Making it easy to lose means figuring
out what you <em>actually</em> think, making that clear, and not wavering from that
initial point of view even when more facts come to light. Or at least
acknowledging that the original viewpoint was incorrect, and now <em>this</em> is what
I [honestly] believe to be true. A regrettable human tendancy is to change
one&rsquo;s opinion during an argument as the facts come to light because &ldquo;with these
facts, my original point of view was wrong, and clearly I wasn&rsquo;t wrong, so that
couldn&rsquo;t have been my real point of view.&rdquo; This needs to be consciously
avoided.</p>

<!-- more -->


<p>But still, I haven&rsquo;t always taken advantage of opportunities to collaborate.
There is a lot of overhead when working with a partner. A lot of your time is
spent explaining to them stuff you already know. These could be things which
took quite a while of staring at text trying to understand, and now it feels
like you&rsquo;re letting them off the hook by just explaining it outright. Sometimes
there are petty disagreements in which I like to code things my way and she
hers, etc.</p>

<p>One small example is that in one project I wanted the code for a very
complicated function to have the following structure</p>

<p>```scala
def complicated1() {</p>

<pre><code>val precondition1 = state1 != invalid &amp;&amp; state2 != invalid
val precondition2 = state3 != invalid || state4 != invalid
val preconditionsMet = precondition1 &amp;&amp; precondition2
if (!preconditionsMet) {
    logError("error 1")
    return // early escape
}
val computationResult = doSomeComputing()
if (!isValid(computationResult)) {
    logError("error 2")
    return // another early escape
}
// the main logic here
</code></pre>

<p>}
```</p>

<p>whereas my partner wanted something more along the lines of the following</p>

<p>```scala
def complicated2() {</p>

<pre><code>if (state1 != invalid &amp;&amp; state2 != invalid
 &amp;&amp; (state3 != invalid || state4 != invalid)) 
{
    val computationResult = doSomeComputing()
    if (isValid(computationResult)) {
        // the main logic here
    }
    else {
        logError("error 2")
    }
}
else {
    logError("error 1")
}
</code></pre>

<p>}
```</p>

<p>It&rsquo;s a petty issue; either way the <em>exact</em> same code is going to execute, and
we each had very good reasons for finding our own way easier to understand. We
didn&rsquo;t bicker over it because we got along very well, and in the end we
actually did it my way. But in reality the actual function was considerably
more complex, and perhaps there were entirely better ways of structuring it
that neither of us noticed.</p>

<p>Now, at work, there is a new-hire considerably more senior and experienced than
I, who started 2 days ago, and who is taking over my project once I go back to
school in a few weeks; so it has been my responsibility to teach him how
everything works. Very often, he feels the need to obsessively ask me: &ldquo;Your
code that says <code>3 + 4</code>, that means you&rsquo;re adding 4 to 3, right?&rdquo; Sometimes he
says &ldquo;right?&rdquo; and I say yes, then he repeats what he said and I repeat &ldquo;yes,
you are correct&rdquo;, and this can continue and I wonder what he is getting out of
that.</p>

<p>At first I resented this because it sometimes felt like no one taught <em>me</em> much
about the codebase when I arrived; for the more complex bits, I just stared at
it until it clicked. This was fun to me, and no one ever seemed to have the
time to go in depth with it anyway. It was good practice at reading others'
code and understanding what it does. Learning new ways of accomplishing many
things that were unfamiliar. Getting used to seeing code that isn&rsquo;t formatted
<em>my way</em>, and accepting it for <em>what it is</em>. Learning how to utilize their code
from mine even when there is no explicitly exported clean API, and so forth.</p>

<p>But well it was the new-guy&rsquo;s day 3 today, and it seems we have really begun to
click as a duo. It is abundantly clear that he has a <em>wealth</em> of skills I lack.
Sure, he could definitely learn this code without my help, but I benefit a
great deal from seeing how he navigates it. What are the parts that he finds
especially confusing? The importance of variable names shines immediately
through. There are a few patches of code where I worked some Scala feature in
there just to try them out. Some of these turned out to be easier to understand
and reuse code from, and for some of them, something more cut-and-dry would
have been better.</p>

<p>Plus there&rsquo;s the fact that two minds are better than one. He&rsquo;s always
questioning my assumptions. To the point where he often straight up doesn&rsquo;t
believe what I say until I prove it. Sometimes he finds flaws in my arguments.
Sometimes, with my assumptions in hand, he invents better solutions to the
problem. Sometimes he understands what I did better than me and tells me its
advantages and disadvantages and alternatives.</p>

<p>My new partner&rsquo;s oft-stated goal is to get to a point where he can start
contributing to our project without my help, so that our concurrent efforts
will speed things along. People with a smart, helpful attitude like that have
been rare in my experience, so if he&rsquo;s being honest, I&rsquo;m all for taking him to
that place as quickly as I can.</p>

<p>I think maybe I just have a bias that everyone who doesn&rsquo;t know what I know
just wasn&rsquo;t smart enough to realize it. That is the thinking pattern of a real
asshole and this experience is making that abundantly clear. Everyone knows
that when learning something new, everything is always surprisingly confusing,
and then once it clicks, everything becomes &ldquo;trivial.&rdquo; However, I have not
spent much time teaching others, so I haven&rsquo;t had the opportunity to see this
&ldquo;click&rdquo; moment in others, and how dumb they all look before that moment occurs.
I do remember teachers explaining something, and me looking at it sideways in
confusion, and asking them to repeat it slower. This happened on many
occasions, and they must have thought I was a real idiot on each of those
occasions, but I was always so relieved when they did repeat, and I often would
strain my brain muscles and actually (partially) &ldquo;get it&rdquo; the second time
through.</p>

<p>The new-guy has taught me a lot from his attitude in joining a new team at a
new workplace. He&rsquo;s not trying to just &ldquo;set to work&rdquo; writing code willy-nilly
as quickly as possible. Compared to him, that&rsquo;s basically what I did. He wants
to <em>truly</em> understand what&rsquo;s going on. What does the architecture look like?
Who is the expert on what? Who is good at explaining things? Who is willing to
take the time to explain things? What do our users want? What do they expect?
What is the timeline? What has been built? What is he responsible for? What are
the alternative solutions that have been under consideration? Who has decision-
making power? Which teams do we collaborate with?</p>

<p>These are all questions that I know the answers to, as they are the necessary
fundamentals of how to operate and move forward. I started actively learning
the answers to these questions as soon as I arrived as well. However, I wasn&rsquo;t
as conscious and certainly not nearly as thorough at answering them as he is.
And over time I may have slipped a bit into a position of people trusting me to
do the right thing, so I don&rsquo;t feel as pressured to be on the ball with
everything at all times. But his arrival has been a reality check in the
importance of having a firm grip on the fundamentals of what are we doing and
why and how best to accomplish it in a strictly-business manner. There is no
excuse for losing one&rsquo;s professionalism, including having a &ldquo;casual&rdquo; workplace.</p>

<p>So far it has been 3 days. On a personal level of course I have learned more
during those 3 days of working with the new guy than I did during the previous
few weeks of working on my own. During this week I have probably also been
slower to accomplish those tasks remaining to finish before I leave. It is
firmly clear that this is a worthy tradeoff, and I will continue to spend the
rest of my time making sure that I am playing as great a part as possible in
his success in moving our project forward into the future. There maybe some
hiccups in our working relationship, because alas I barely know the guy, and
we&rsquo;re from different societal cultures, and my first impressions of people are
always notoriously off-base. However, now it is clear that the responsibility
is my own to make sure any future road-bumps are known to be my fault and my
problem and mine to fix with his help.</p>
]]></content>
  </entry>
  
</feed>
