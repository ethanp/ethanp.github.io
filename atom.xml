<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[With Pith]]></title>
  <link href="http://ethanp.github.io/atom.xml" rel="self"/>
  <link href="http://ethanp.github.io/"/>
  <updated>2016-02-28T15:30:21-08:00</updated>
  <id>http://ethanp.github.io/</id>
  <author>
    <name><![CDATA[Ethan Petuchowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Java Network Programming Fundamentals]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals/"/>
    <updated>2016-02-28T15:15:13-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/28/some-java-network-programming-fundamentals</id>
    <content type="html"><![CDATA[<p>Most of what I&rsquo;ve learned and discussed here comes from <em>TCP/IP Sockets in
Java</em>, a highly recommended book about this stuff by Calvert and Donahoo. Some
of it also comes from <em>Java Network Programming</em> by Elliotte Rusty Harold.</p>

<h2>Overview</h2>

<ul>
<li>The <em>only</em> transport-layer protocols Java supports are TCP &amp; UDP; for
anything else, you must link to native code via the Java Native Interface</li>
<li>TCP uses <em>stream</em> sockets, through which one generally just writes to an
<code>OutputStream</code> and reads from an <code>InputStream</code> of bytes that remain in-order
and uncorrupted and are (practically) guaranteed delivery by the
implementation of the protocol by the operating system.

<ul>
<li>Unless you&rsquo;re using NIO; see below for more on that</li>
</ul>
</li>
<li>UDP uses <em>datagram</em> sockets, through which you <code>send</code> and <code>receive</code> objects
called <code>DatagramPacket</code>s, which are just a length, a destination, and data</li>
<li>Unless you&rsquo;re using NIO, everything <em>blocks</em>: e.g. connecting to servers,
listening for clients, reads, writes, and disconnecting (for TCP)

<ul>
<li>By default most of these actions may block <em>indefinitely</em></li>
<li>For reading and connecting, you can configure a timeout, after which you
will receive an <code>InterruptedIOException</code></li>
<li>For <em>writing</em> to a TCP stream, you <em>cannot</em> configure a timeout</li>
</ul>
</li>
</ul>


<h3>Handling multiple clients</h3>

<ul>
<li>Deal with one at a time, which is simplest, especially if there&rsquo;s some state
that is shared by all potential clients. Speed may become problematic
quickly.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Socket</span> <span class="n">s</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>        <span class="n">handle</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Socket</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// process request, etc.</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new thread to handle each incoming client. This is still pretty
simple, but will lead to massive overhead if you have many concurrent
clients, and therefore you&rsquo;re context-switching all the time.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Socket</span> <span class="n">s</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>                <span class="c1">// process request, etc.</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use a thread pool to handle requests. Java has abstracted the thread pool
concept into the <code>Executors</code> factory class. There are a multitude of
executors to choose from. This <code>newCachedThreadPool()</code> one will execute each
task on an existing thread if one is idle, and will create a thread
otherwise. Threads sitting idle in the cache for over one minute are
terminated.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">mainLoop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Socket</span> <span class="n">s</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TheHandler</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">TheHandler</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Socket</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TheHandler</span><span class="o">(</span><span class="n">Socket</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// process request, etc.</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use NIO (rather complicated) to allow <code>N</code> threads to service <code>M</code>
clients, where <code>N</code> is small and <code>M</code> is huge. This uses event-based
programming. We can set all network operations to be non-blocking, and
only wait as long as we want to for them. An extensive example can be
found below.</li>
<li>Use a framework like Netty, Akka, etc. that wraps the NIO stuff up in a
ribbon and a tie</li>
</ul>


<h3>10K feet above NIO</h3>

<!-- more -->


<ul>
<li>If you&rsquo;re using NIO, you create <code>Channel</code>s of bytes into and out of sockets
(or file handles)</li>
<li>You register a <code>Selector</code> to be notified when the <code>Channel</code> is ready to be
read from or written to</li>
<li>You query the <code>Selector</code> to tell you which <code>Channel</code> are ready, and may then
take action on those that are</li>
<li>You get data in and out by passing a <code>Buffer</code> to the <code>Channel</code></li>
</ul>


<p>Here&rsquo;s an example based on TCP/IP Sockets in Java, a highly recommended book
about this stuff by Calvert and Donahoo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Selector</span> <span class="n">slctr</span> <span class="o">=</span> <span class="n">Selector</span><span class="o">.</span><span class="na">open</span><span class="o">();</span> <span class="c1">// factory</span>
</span><span class='line'><span class="n">ServerSocketChannel</span> <span class="n">chnl</span> <span class="o">=</span> <span class="n">ServerSocketChannel</span><span class="o">.</span><span class="na">open</span><span class="o">();</span> <span class="c1">// factory</span>
</span><span class='line'><span class="n">chnl</span><span class="o">.</span><span class="na">socket</span><span class="o">().</span><span class="na">bind</span><span class="o">(</span><span class="n">inetAddr</span><span class="o">);</span> <span class="c1">// set address to listen on</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For some reason Channels block by default. If we want to</span>
</span><span class='line'><span class="c1">// register with the Selector for notifications, we must turn</span>
</span><span class='line'><span class="c1">// that off.</span>
</span><span class='line'><span class="n">chnl</span><span class="o">.</span><span class="na">configureBlocking</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notify Selector whenever this Channel has a new connection</span>
</span><span class='line'><span class="c1">// ready to be &quot;accepted&quot;. Such a notification still does</span>
</span><span class='line'><span class="c1">// *not* guarantee it will work immediately.</span>
</span><span class='line'><span class="n">chnl</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">slctr</span><span class="o">,</span> <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_ACCEPT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// wait configurable period of time to be notified</span>
</span><span class='line'>    <span class="c1">// by any registered channel</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numNotifications</span> <span class="o">=</span> <span class="n">slctr</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">timeoutMS</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">numNotifications</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// We timed out without any notification.</span>
</span><span class='line'>        <span class="c1">// We could do whatever we want here because we&#39;re</span>
</span><span class='line'>        <span class="c1">// no longer blocked.</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// numNotifications different channels have notified us of</span>
</span><span class='line'>        <span class="c1">// being available for Connect, Read, Accept, or Write.</span>
</span><span class='line'>        <span class="c1">// It is OK to use these keys in concurrent threads.</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">SelectionKey</span> <span class="n">key</span> <span class="o">:</span> <span class="n">slctr</span><span class="o">.</span><span class="na">selectedKeys</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// We&#39;re not sure which channel this key belonged to.</span>
</span><span class='line'>            <span class="c1">// Also, notification was just a &quot;hint&quot; and we need to</span>
</span><span class='line'>            <span class="c1">// check again whether the Channel is available.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isAcceptable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// here&#39;s the actual call to accept()</span>
</span><span class='line'>                <span class="n">SocketChannel</span> <span class="n">clientChnl</span> <span class="o">=</span>
</span><span class='line'>                    <span class="o">((</span><span class="n">ServerSocketChannel</span><span class="o">)</span> <span class="n">key</span><span class="o">.</span><span class="na">channel</span><span class="o">()).</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// similar to the ServerSocketChannel</span>
</span><span class='line'>                <span class="n">clientChnl</span><span class="o">.</span><span class="na">configureBlocking</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// Except that here we register to notify Selector</span>
</span><span class='line'>                <span class="c1">// about being &quot;readable&quot;, and</span>
</span><span class='line'>                <span class="n">clientChnl</span><span class="o">.</span><span class="na">register</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">key</span><span class="o">.</span><span class="na">selector</span><span class="o">(),</span>
</span><span class='line'>                    <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_READ</span><span class="o">,</span>
</span><span class='line'>                    <span class="c1">// We must associate an &quot;attachment&quot; with this</span>
</span><span class='line'>                    <span class="c1">// channel. This is the buffer that will be</span>
</span><span class='line'>                    <span class="c1">// filled with the incoming bytes rcvd via TCP.</span>
</span><span class='line'>                    <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="n">NUM_BYTES</span><span class="o">)</span> <span class="c1">// eg 256?</span>
</span><span class='line'>                <span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isReadable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// retrieve the readable client socket&#39;s channel</span>
</span><span class='line'>                <span class="n">SocketChannel</span> <span class="n">client</span> <span class="o">=</span>
</span><span class='line'>                    <span class="o">(</span><span class="n">SocketChannel</span><span class="o">)</span> <span class="n">key</span><span class="o">.</span><span class="na">channel</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// retrieve the ByteBuffer we associated with</span>
</span><span class='line'>                <span class="c1">// that channel</span>
</span><span class='line'>                <span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="o">(</span><span class="n">ByteBuffer</span><span class="o">)</span> <span class="n">key</span><span class="o">.</span><span class="na">attachment</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Attempt to read `buf.remaining()` bytes _from_</span>
</span><span class='line'>                <span class="c1">// the Channel _into_ the ByteBuffer.</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// -1 from read() means end-of-stream, which in</span>
</span><span class='line'>                <span class="c1">// this case means the client closed their output</span>
</span><span class='line'>                <span class="c1">// side of the TCP connection. We may still be</span>
</span><span class='line'>                <span class="c1">// able to send data if that side of the connection</span>
</span><span class='line'>                <span class="c1">// has not been closed yet.</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">bytesRead</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">bytesRead</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// if our application has data to write back</span>
</span><span class='line'>                    <span class="c1">// to the client, we must tell the selector</span>
</span><span class='line'>                    <span class="c1">// that we&#39;ve now become interested in writing</span>
</span><span class='line'>                    <span class="n">key</span><span class="o">.</span><span class="na">interestOps</span><span class="o">(</span><span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_READ</span>
</span><span class='line'>                                    <span class="o">|</span> <span class="n">SelectionKey</span><span class="o">.</span><span class="na">OP_WRITE</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// socket not closed, and is writable</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">isValid</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">isWritable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// beyond the scope of this post.</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tips for Traps</h2>

<ul>
<li>Don&rsquo;t write to the network through a <code>PrintStream</code>

<ul>
<li>It chooses end-of-line chars based on your platform, not the protocol
(HTTP uses <code>\r\n</code>)</li>
<li>It uses the default char encoding of your platform (likely UTF-8), not
whatever the server expects (likely UTF-8)</li>
<li>It eats all exceptions into this <code>boolean checkError()</code> method, when
you&rsquo;re better off just using the normal exception hubbub</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asking for Advice]]></title>
    <link href="http://ethanp.github.io/blog/2016/02/27/asking-for-advice/"/>
    <updated>2016-02-27T15:38:06-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/02/27/asking-for-advice</id>
    <content type="html"><![CDATA[<p>There are many circumstances in life during which one may feel the need to ask
for advice. For example, when evaluating a significant decision, or when
dealing with an emotionally stressful circumstance. Here, I will discuss
advice about significant decisions.</p>

<p>In giving advice, everyone has a different approach. I generally try to follow
a line I heard in a rap song by The Streets, &ldquo;If you never tell a lie to her,
you don&rsquo;t have to remember anything.&rdquo; In other words, lying will only
complicate your life because you have to remember the lies you made up.
(Caveat: this may not always the best way to go for emotionally complex
issues.) I also enjoy helping people rationally and realistically evaluate
their options for significant decisions, and surely if someone recalls that
your input was helpful in the past, they will be more likely to ask you in the
future.</p>

<p>Most people I know don&rsquo;t seem to like giving useful advice. It seems they
either are (1) too afraid that their honesty will lead you to dislike them, or
(2) they feel so stressed with their own issues that taking on yours for a few
minutes would be overwhelming, or (3) they find your problem uninteresting and
simply have better things to do.</p>

<p>But some people are the opposite. They will patiently listen to your question
and give what they feel to be an honest evaluation of where you stand and what
you should do. The advice of people in this category will often be heavily and
obviously biased by their own experience and ideology. This is simply a
symptom of &ldquo;being honest&rdquo;.</p>

<p>So if you want good advice, it would be ideal to find someone who is honest,
not stressed about a similar problem to yours, as well as interested in and
knowledgeable of the subject; they should generally also be disinterested in
your particular problem. However, this ideal candidate is not always
available.</p>

<!-- more -->


<p>In that case one can obviously try the timeless &ldquo;pros vs cons&rdquo; list, which
doesn&rsquo;t necessarily rely on external sources of wisdom, but often external
sources of wisdom are critical. One can ask unideal candidates for advice, and
maybe they&rsquo;ll at least have some curt nugget that has some use. That&rsquo;s what I
usually do, and it is generally not effective at all, but occasionaly that
curt nugget is exactly the required pithy jewel.</p>

<p>One can consult the Internet, but I kind of assumed that if you needed advice,
you already checked the Internet for answers. But to go one step further you
can <em>ask</em> the Internet, treating it like this all knowing Oracle. This will
work to varying degrees depending on your problem. If your problem is one that
everyone and their mother has an opinion on, you will end up sifting through
junk answers, and may or may not get anything useful. In that case, the more
details you can reveal, the more benefit you will obtain. Of course <em>where</em>
you ask matters: for example Quora will be more effective than Yahoo Answers.
If your problem is esoteric, <em>find the people who are into that thing</em>.</p>

<p>For example, I have noticed to my surprise that StackOverflow/StackExchange is
not always the best place for all programming-related questions, because if
your question is esoteric to one technological ecosystem, the question-
answering population on StackOverflow won&rsquo;t necessarily have the flag-bearers
of the cause of that particular ecosystem. But if it really is an ecosystem,
it will have a place where the flag-bearers dwell, so <em>find it</em> and they will
probably help. In my experience, IRC channels tend to be empty; Gitter
channels may be well-attended; Github issues get a lot of flak for being a
mess, but are often effective if you&rsquo;re sure your question isn&rsquo;t stupid;
mailing lists can be high-latency but that&rsquo;s often where the true experts of
super-technical projects converse. Following <strong>good forum-question-asking
practices</strong> is <em>crucial</em> in <em>any</em> of these environments, and it can be
trickier to do that than it sounds. <strong>The better you phrase your question, the
more appealing it is to answer in the eyes of a high-quality potential source
of advice.</strong></p>

<p>Sometimes the advice you receive from multiple sources will be in direct
conflict with each other. I have been having this issue a lot lately. Let&rsquo;s
say one person suggested I do <code>A</code>, and another suggested I do <code>not A</code>. I have
decided this pair of suggestions implies that <em>either</em> decision is just fine,
which is basically the ideal outcome; viz. my so-called &ldquo;significant decision&rdquo;
was not so significant after all and doesn&rsquo;t not need to be balanced
carefully.</p>

<p>Just some biased thoughts from my experience; take some, leave some, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Tone Makes the Point]]></title>
    <link href="http://ethanp.github.io/blog/2016/01/07/the-tone-makes-the-point/"/>
    <updated>2016-01-07T08:40:04-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/01/07/the-tone-makes-the-point</id>
    <content type="html"><![CDATA[<p>Recently, hot-shot investor Paul Graham wrote a <a href="http://www.paulgraham.com/ineq.html">piece about economic
inequality</a>. This essay provoked a lot of dialogue online. I read the
piece, and a few responses to it. I enjoyed the essay, and I found it very
persuasive. In fact, I would say my &lsquo;opinion on the matter&rsquo; has been changed by
reading the essay and its accompanying summary by the author. The responses I
read were also very interesting. They were from seemingly center-left-wing
individuals like myself, only they were <em>not</em> persuaded by Graham&rsquo;s arguments.</p>

<p>My point here is not so much to discuss the piece, as the tone of the piece.
This piece was written with a tone that raises the hair on the back of the
necks of liberals. This may have been unintentional on the part of Graham,
&hellip;although considering the follow-up discussions of his previous piece on
females in tech, may he just likes raising those particular hairs (they&rsquo;re
called &ldquo;hackles&rdquo;).</p>

<!-- more -->


<p>I will now summarize what I took from the essay. Technology increases the
potential productivity of people at an exponential rate. Since some people do
not become more productive, this correspondingly increases the <em>variability</em> of
productivity within the population. Those who are more productive in producing
innovative goods are benefitting society. They mainly only are interested in
being more productive <em>because</em> of the possibility of getting rich off of it.
If we want to help the poor, the problem is <em>not</em> that there are rich people;
the problem is that there are poor people. To help the poor, instead of taking
away the ability for the productive to get rich, we should help the poor become
more productive. This is because economic inequality <em>per se</em> is not the issue,
poverty is.</p>

<p>For me, this is, as I&rsquo;ve mentioned, both convincing and enlightening. But there
are two concerns any left-winger is almost certainly going to bring up. First,
a lot of people&rsquo;s wealth is not made by being productive in a way that benefits
society; shouldn&rsquo;t we wage class-war against them? Second, even people who
became rich by benefitting society, are likely to abuse their wealth via some
form of corruption, so that&rsquo;s why we should prevent them from getting rich in
the first place. After those two arguments, there are a few other popular
rebuttals. (E.g.) Third, why should we allow some people to be <em>that</em> much
richer than everyone else; something about it seems creepy, therefore it should
be prevented.</p>

<p>These <em>are</em> legitimate concerns, they just don&rsquo;t <em>actually</em> rebut anything
Graham was saying. That&rsquo;s why, if Graham wants to have a legitimate
conversation with people who are going to make the above rebuttals, his
argument should <em>start</em> by saying that those rebuttals are <em>correct</em>, and then
go into how it is <em>still</em> the case that his original arguments are correct. In
this way, the hackles are down, and the legitimate points can be heard.</p>

<p>However, maybe Graham wasn&rsquo;t writing the essay for left-wing people to be
convinced. Maybe he was trying to convince right-wing people. If that is true,
the essay was pointless, because right-wing people <em>already</em> agree with the
opinions he stated. Or maybe he was writing the essay for maximum &ldquo;virality&rdquo; to
increase his fame and international mindshare. In that case, I&rsquo;m not a good
judge of effective argument technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gamified Learning]]></title>
    <link href="http://ethanp.github.io/blog/2016/01/03/gamified-learning/"/>
    <updated>2016-01-03T21:34:05-08:00</updated>
    <id>http://ethanp.github.io/blog/2016/01/03/gamified-learning</id>
    <content type="html"><![CDATA[<p>I have spent the last few days trying to get better at programming. I am no
longer in school, so if I want to learn about, say, compilers, I can&rsquo;t just
sign up for a class on that. There are multiple ways to go about it. It depends
on what you really want to learn and what you want to be able to do with that
knowledge. I have tried various methods of learning over the past few days,
which I have listed below.</p>

<p>What I have noticed of myself is that gamification <strong>works</strong> for me. I love the
satisfaction of (in descending order of [perceived] satisfaction)</p>

<ul>
<li>earning a badge</li>
<li>getting to the next level</li>
<li>beating other humans (directly, or via &ldquo;percentile&rdquo; calculation)</li>
<li>beating robots (similar to &ldquo;beating a boss&rdquo; in a video game)</li>
<li>getting points</li>
</ul>


<!-- more -->


<p>Missing from the list below is Coursera, Udacity, etc. After 6 years of school,
I&rsquo;m <em>really</em> of sick of sitting in a lecture hall, even if it&rsquo;s a virtual one.
As a testament to this sentiment, so far I&rsquo;ve read ~150 pages of the Compilers
textbook, which is the book I would be reading were I to take the class at
University. Sometimes I miss having a teacher whose personality I can associate
with the material. This is a bizarre notion, but it is really important. For
me, having a &ldquo;great teacher&rdquo; means someone I want to please by doing well on
the test. Having a &ldquo;bad teacher&rdquo; means I don&rsquo;t care what the teacher thinks of
me, and frankly I want to do badly to make them feel bad. This is a mean way of
looking at the world, and I don&rsquo;t do it consciously, but looking back at how I
approached my classes, this is what I did a lot of the time. Having a &ldquo;great
teacher&rdquo; is an amazing feeling, and an excellent motivator to really dig into
the subject. But I certainly <em>don&rsquo;t</em> miss all the other crap that comes from
having a teacher (even a &ldquo;great&rdquo; one). The main problem with teachers is that
you need to be respectful of their time and the time of the other students in
the class. This leads to a huge amount of wasted time on the part of each
student, because his or her <em>particular</em> questions aren&rsquo;t being answered. I
could go on about that but I won&rsquo;t. The point is, that I really
feel like I understand everything that has happened so far in the 150 pages of
the Compilers book, and it didn&rsquo;t require and physical hand-holding. It is
exceptionally easy to read a book and think you understand it, and actually
<em>not</em> be understanding it. So who knows.</p>

<h3>Here on out</h3>

<p>My first &ldquo;real&rdquo; day of my first &ldquo;real&rdquo; job is tomorrow. So I probably won&rsquo;t be
spending much time just randomly learning whatever I want in the future. But in
general, these are things that I like to learn about, and methods of learning
them that I enjoy doing; so as I find time, I will come back to these things.</p>

<h3>The List</h3>

<p>This list contains bullets for each thing I have tried to learn over the past
few weeks. The sub-bullets contain methods I have used to actually <em>do</em> the
learning. Many of them are gamified methods of learning (e.g. HackerRank).
Others, I have tried to gamify on my own (e.g. using test-driven development).</p>

<ul>
<li>Learn about compilers

<ul>
<li>read Compilers &ldquo;Dragon Book&rdquo; textbook

<ul>
<li>avg 8 pages per day for 20 days</li>
</ul>
</li>
<li>do the exercises (on paper)</li>
</ul>
</li>
<li>Review AI &amp; machine learning

<ul>
<li>earn an AI &ldquo;badge&rdquo; on HackerRank by

<ul>
<li>doing statistics problems (e.g. &ldquo;find the z-score&rdquo;)</li>
<li>writing a few programs (e.g. &ldquo;do a multiple linear regression on the
given data&rdquo;)</li>
</ul>
</li>
</ul>
</li>
<li>Become more familiar with algorithms and their application

<ul>
<li>do practice problems on Hackerrank</li>
<li>Read [from] the algorithms textbook &ldquo;CLRS&rdquo;</li>
</ul>
</li>
<li>Become a &ldquo;good programmer&rdquo;

<ul>
<li>write the programs suggested in &ldquo;Programming Pearls&rdquo; by Jon Bentley</li>
<li>Beat bots and people at debugging code on <code>codefights.com</code></li>
</ul>
</li>
<li>Learn via observation

<ul>
<li><code>Livecoding.tv</code> (haven&rsquo;t actually looked into this one yet)</li>
<li>Annotate the code of small open source projects with comments explaining
how it is working

<ul>
<li>substack &mdash; creator of popular modules for Node.js</li>
<li>Li Haoyi &mdash; Scala projects using concepts from compilers</li>
</ul>
</li>
</ul>
</li>
<li>Understand P2P networking

<ul>
<li>Create a personal &ldquo;open source&rdquo; programming project that is a P2P
networking application

<ul>
<li>To a large extent using test-driven development</li>
</ul>
</li>
</ul>
</li>
<li>Learn to use NodeJS

<ul>
<li>do the <code>learnyounode</code> interactive tutorial</li>
</ul>
</li>
<li>Learn about functional programming

<ul>
<li>read from Learn you a Haskell</li>
<li>write some simple haskell programs as part of a &ldquo;learn to code in 30
days&rdquo; competition on HackerRank</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Glimpse of Compilers]]></title>
    <link href="http://ethanp.github.io/blog/2015/12/26/first-glimpse-of-compilers/"/>
    <updated>2015-12-26T22:49:00-08:00</updated>
    <id>http://ethanp.github.io/blog/2015/12/26/first-glimpse-of-compilers</id>
    <content type="html"><![CDATA[<p>I am close to two chapters into &ldquo;Compilers&rdquo; (a.k.a. &ldquo;The Dragon Book&rdquo;), by Aho,
Lam, Sethi, and Ullman. It is an exciting topic to learn about.</p>

<p>The most fundamental thing I have learned so far is the overall pipeline for
understanding the modular components forming the way a compiler is typically
constructed. It goes</p>

<ol>
<li>Lexical analyzer</li>
<li>Syntax analyzer</li>
<li>Semantic analyzer</li>
<li>Intermediate code generator</li>
<li><em>Machine-independent code optimizer</em> (optional)</li>
<li>Code generator</li>
<li><em>Machine-dependent code optimizer</em> (optional)</li>
</ol>


<p>The input to the compiler pipeline is a &ldquo;character stream&rdquo; of the program.
However I don&rsquo;t recall the book ever dealing with specifications of that
stream, except that it supports a generic <code>getchar()</code> operation. I can
understand that if the entire source consists of one file, you just read
character-by-character from the file into the compiler. Maybe the language
designer decides how multiple-file projects are to be read by the compiler,
i.e. it is beyond the scope of this book; or maybe they&rsquo;ll go more in-depth on
this later-on.</p>

<h3>The Lexical Analyzer</h3>

<p>The character stream is read into first component in the compilation pipeline:
the <strong>lexical analyzer</strong>, which maps the <em>character stream</em> into a <em>&ldquo;token&rdquo;
stream</em>. It seems like a <strong>token</strong> knows its <em>tag</em>, and its <em>value</em>. The
<strong>tag</strong> is basically the <em>type</em> of this token in the eyes of the compiler.
Possible tags in their example include <code>NUM</code>, <code>ID</code>, <code>[keyword]</code>s, and I added
<code>COMMENT</code> as part of an exercise. The <strong>value</strong> for a token might be the
literal <em>value</em> of a literal; or it might be the name of a variable. More about
that below.</p>

<h4>Symbol Tables</h4>

<p>In addition to creating the token stream, the lexical analyzer builds the
<em>symbol table</em>. It seems to that the <strong>symbol table</strong> maps names to places in
memory. A symbol table also &lsquo;by default&rsquo; implements the language&rsquo;s preferred
form of <em>block scoping</em>. Upon entering a new scope, a new symbol table is
created that points to its &ldquo;parent&rdquo;, the one it is nested inside of. If a
variable is <em>declared</em>, it is added to the symbol table to this scope. Later,
when a variable is <em>referenced</em> (i.e. init&rsquo;d, read, or updated), we will
consult the table for the current innermost scope. If the variable&rsquo;s data is
not found there, we will continue to check ancestors until we find it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning vs Doing]]></title>
    <link href="http://ethanp.github.io/blog/2015/12/19/learning-vs-doing/"/>
    <updated>2015-12-19T14:05:20-08:00</updated>
    <id>http://ethanp.github.io/blog/2015/12/19/learning-vs-doing</id>
    <content type="html"><![CDATA[<p>The goal of my first project at my first &ldquo;real&rdquo; job is to get something useful
done within a few days and start to feel like a contributing member of the
team. However it has been about a week, and I still have not finished that
project.</p>

<p>From my experience talking with some of my colleagues so far, their collective
attitude might be summed up with, &ldquo;Google it, then copy-paste it, but don&rsquo;t
worry about what it does.&rdquo; In my life, I have worked with and met <em>many</em> people
having that attitude. Partially because of my experience working with those
people, it happens to decidedly <em>not</em> be <em>my</em> attitude. My attitude is more
like &ldquo;google it, learn what to do, learn why that is the right approach, take
notes, and then copy-paste and modify the best solution to make the final
solution as clean as possible.&rdquo; This strategy got me through many tough
situations, so I have built up faith in it.</p>

<p>So, after seeing me spend <em>days</em> learning about ssh tunnelling, ansible, and
vagrant &mdash; and not finishing my simple project &mdash; they finally said something
along the lines of</p>

<blockquote><p>At this rate it will take you weeks to learn how to automate deployment of a
virtual machine. Why don&rsquo;t you just deploy <em>one</em> copy and then learn about
how to automate it on your <em>own</em> time?</p></blockquote>

<p>Now, &ldquo;weeks&rdquo; is probably an overstatement, but they pointed out to me that I
had sort of assumed out of nowhere that I was hired as some sort of devops role
for the company, even though what I&rsquo;m actually interested in is what one might
call &ldquo;big data engineering&rdquo;. They said, &ldquo;<em>If</em> you find yourself repeating the
same tasks over and over, <em>then</em> you should learn to automate them.&rdquo; It is now
obvious that they are in the right.</p>

<p>At the time, I was startled by the way they approached me about what I consider
to be largely a difference in personalities. But I can see that they are
concerned that someone who reads too much never gets anything done, and so far
I have fit that stereotype. At the same time, I am concerned that a person who
<em>doesn&rsquo;t</em> read will do their work quickly and incorrectly and will then spend
the next few weeks rejiggering a broken project, and so far they have fit that
stereotype. In short, it seems that we are all prejudiced and have plenty to
learn from each other.</p>

<p>Going forward I shall take their advice and do the more mundane tasks as fast
as possible and only learn things that come up more than once. If that doesn&rsquo;t
work out for me because I&rsquo;m just cranking out shitty work, I will revert back
to understanding what I am doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very Basics of Jetty]]></title>
    <link href="http://ethanp.github.io/blog/2015/10/27/very-basics-of-jetty/"/>
    <updated>2015-10-27T09:09:50-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/10/27/very-basics-of-jetty</id>
    <content type="html"><![CDATA[<h3>Jetty has <em>cutting edge</em> HTTP/2 support</h3>

<p>For my Wireless Networking project, I&rsquo;m going to compare HTTP/1.1 and HTTP/2
with respect to performance metrics when talking to a mobile phone over the
cellular network. There are not so many <a href="https://github.com/http2/http2-spec/wiki/Implementations">implementations</a> of HTTP/2 right
now, and some of them seem a bit shaky. At the end of the day, it seems to me
that the easiest way to run this sort of experiment in a reliable fashion is to
use Java&rsquo;s <a href="http://www.eclipse.org/jetty/">Jetty</a> project. It has well-tested HTTP/1.1 support, many
heavyweight framework users, implements HTTP/2&rsquo;s server push and all sorts of
HTTP/2 negotation mechanisms, and I like static types.</p>

<h3>Jetty is hard to find tutorials for</h3>

<p>So I need to learn the basics of Jetty; and there&rsquo;s a lot to learn, and I
haven&rsquo;t found a stellar resource, so I&rsquo;ve been reading the <a href="http://www.eclipse.org/jetty/documentation/current/embedding-jetty.html">embedded
examples</a>, which are decent. I&rsquo;m usng &ldquo;embedded&rdquo; Jetty because that means
I can write type-safe Java rather than XML. Perhaps XML would be a good choice
for a long-standing app, but I&rsquo;m making a prototype and it&rsquo;s easier to just
write code.</p>

<p>Here&rsquo;s a brief overview of what I&rsquo;ve learned so far, which may come in handy
for someone else wanting to understand the very basics of Jetty (version 9).
This is not a detailed overview because I don&rsquo;t know what I&rsquo;m talking about.
I&rsquo;m just explaining the things I have learned from the tutorial linked above
and some mucking around.</p>

<!-- more -->


<h3>Jetty has a few large architectural components</h3>

<p>The main things you need to deal with in Jetty are <code>Server</code>s, <code>Handler</code>s, and
<code>Connector</code>s.</p>

<p>The <code>Server</code> manages your entire web site. It does this by connecting
<code>Connector</code>s to <code>Handler</code>s. The default <code>Connector</code>, <code>ServerConnector</code> responds
to vanilla HTTP/1.1 requests. If you try to make a request via <code>https</code> to a
<code>ServerConnector</code> without <code>https</code> support, in Chrome you will see the following
error message</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ERR_SSL_PROTOCOL_ERROR
</span><span class='line'>
</span><span class='line'>Unable to make a secure connection to the server. This may be a problem with
</span><span class='line'>the server, or it may be requiring a client authentication certificate that you
</span><span class='line'>don&#39;t have.
</span></code></pre></td></tr></table></div></figure>


<h4>Handler</h4>

<p>You may want a chain of <code>Handler</code>s that will be tried one after another until
one is found to be appropriate for handling the current request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HandlerList</span> <span class="n">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerList</span><span class="o">();</span>
</span><span class='line'><span class="n">handlers</span><span class="o">.</span><span class="na">setHandlers</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">[]</span> <span class="o">{</span> <span class="n">resource_handler</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultHandler</span><span class="o">()</span> <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>DefaultHandler</code> will simply return <code>404</code>s for everything. Jetty will keep trying <code>Handler</code>s in the list until one of them performs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">baseRequest</span><span class="o">.</span><span class="na">setHandled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the <code>DefaultHandler</code>&rsquo;s source, we can see that indeed, in the
<code>handle</code> method, this is the <em>first</em> thing it does.</p>

<h4>Connector</h4>

<p>Each <code>Connector</code> instance can respond to a particular <em>protocol</em> at a
particular <em>host</em> on a particular <em>port</em>. So if you want to respond to <code>https</code>
requests as well as vanilla <code>http</code>, you&rsquo;re going to need another <code>Connector</code>.</p>

<h4>Routing</h4>

<p>A <code>ContextHandler</code> is used to do what in Rails would be called &ldquo;routing&rdquo;. This
is where you associate path&rsquo;s in the HTTP request header to the right
controller. After you&rsquo;ve created your <code>ContextHandler</code>s and set their
<code>contextPath</code>s, you need to do the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Server</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">ContextHandlerCollection</span> <span class="n">contexts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContextHandlerCollection</span><span class="o">();</span>
</span><span class='line'><span class="n">contexts</span><span class="o">.</span><span class="na">setHandlers</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">[]</span> <span class="o">{</span> <span class="n">context0</span><span class="o">,</span> <span class="n">context1</span><span class="o">,</span> <span class="o">...</span> <span class="o">});</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">setHandler</span><span class="o">(</span><span class="n">contexts</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means the server is going to ask the <code>ContextHandlerCollection</code> for the
first <code>ContextHandler</code> that matches the path specified on the incoming request.</p>

<h3>Conclusion: Jetty feels dated compared to Ruby on Rails</h3>

<p>So far, I find Jetty surprisingly nice. I&rsquo;m
starting to appreciate the fact that it is written in Java and it is open
source. It&rsquo;s so different from Ruby on Rails and Node.js because there is not a
lot of magical mystery code running in the background whose source is difficult
to find. The advantage of those other frameworks is that they have much higher
level APIs. I find myself wrapping Jetty methods into my own methods that do
what in Rails would have been done automatically. Now I understand the draw of
Rails&rsquo;s &ldquo;convention over configuration&rdquo; and &ldquo;don&rsquo;t repeat yourself&rdquo;. I didn&rsquo;t
realize how much configuration and repeating yourself was necessary back in the
Java days. And that leads me to my next point, that writing Jetty feels like
writing 10 year old code. I wasn&rsquo;t coding 10 years ago, but I imagine you had
to explicitly wire every last thing together by hand over and over again, as
you do in Jetty.</p>

<p>Unlike Rails or iOS, basic Jetty is not a Model View Controller framework. It&rsquo;s
just handlers on a server, more like Node.js. Personally, I like MVC out of
ignorance because I assume people who came up with it thought the &ldquo;application
framework&rdquo; way of doing thigs was &lsquo;bad&rsquo;, and I tend to trust people who don&rsquo;t
like the &lsquo;old&rsquo; way of doing things. That said, I am not making a database based
application here so I will not evaluate this difference any further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to HTTP/2]]></title>
    <link href="http://ethanp.github.io/blog/2015/10/26/intro-to-http-slash-2/"/>
    <updated>2015-10-26T14:11:59-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/10/26/intro-to-http-slash-2</id>
    <content type="html"><![CDATA[<h2>The problem of HTTP/1.1</h2>

<h3>HTTP/1.1 is from an earlier Web</h3>

<p>For the past several years, Google, Mozilla, Akamai, the IETF, the academic
research community, and others have been engaged in efforts to reduce PLTs
experienced by users of the WWW. One bottleneck in apparent need of an update
is the now-&ldquo;ancient&rdquo; HTTP/1.1 (H1) protocol, published in 1999.</p>

<p>From the beginning, one of the major design goals of the original HTTP protocol
was simplicity to implement and adopt, to encourage growth of the WWW.
Evidently, this technique worked. However, over the past 16 years, the way
people create, distribute, and view pages on the WWW has changed drastically.
Pages today have far more Javascript, CSS, images, and other content to go
along with the vanilla HTML. In the course of this evolution, numerous issues
with H1 have come up, mostly pertaining to the number of sequential round-trips
it requires to fully download the data for each web page. These round-trips
introduce unnecessary latency.</p>

<!-- more -->


<p>Over the past 16 years, countermeasures, &ldquo;optional&rdquo; protocol alterations, and
application level workarounds have been suggested and implemented to reduce the
round-trip count and therefore latency of pages retrieved using H1.</p>

<h3>HTTP/1.1 PLT Optimizations</h3>

<p>Some optimizations servers and browsers use to lower PLTs seen by clients are
the following:</p>

<ol>
<li>Opening multiple TCP connections to request the download of multiple
required web page resources in parallel.</li>
<li>Inlining and concatenating scripts and stylesheets to reduce the number of
requests.</li>
<li><em>HTTP pipelining</em>, in which multiple requests are sent by the browser over a
single TCP connection before waiting for responses to any, then the server
sends all of the responses back in the same order.</li>
</ol>


<p>HTTP pipelining was an idea that did not work out. It seemed like a logical
approach to improve HTTP performance by reducing latency. However, in reality,
HOL blocking became an even greater issue then it already had been, and it also
led to issues with older proxies that are difficult to update. Nowadays, modern
browsers do not enable pipelining.</p>

<h2>HTTP/2 aims to address these issues</h2>

<p>The main reason multiple resources can&rsquo;t be <em>multiplexed</em> (downloaded in
parallel) over a single TCP connection in H1 is because it is an ASCII
protocol. Being an ASCII protocol means that there is no easy way to specify
how to demultiplex those responses with a parser.</p>

<p>To address this, HTTP/2 (H2) is a <em>binary</em> protocol that <em>can</em> easily multiplex
multiple requests and responses through a single TCP connection. It does this
using a new <em>binary framing layer</em>, in which responses are broken into separate
<em>frames</em> and interleaved through the TCP socket.</p>

<p>Web designers have discovered that to yield the best user experience, the
server should transmit certain most-important resources first, as soon as they
are available to send (e.g. loaded from disk). H2 frames (and <em>streams</em>) have
an (optional) <code>priority</code> field to allow the application developer (and server
writer) to bias the ordering of frames sent through the socket. For example,
one may want to ensure that <code>.html</code> files have a higher priority than <code>.jpeg</code>
files because <code>.jpeg</code>s contain a lot of data and are not as crucial for showing
the user a <em>barebones</em> version of the page they requested.</p>

<h3>Brief History</h3>

<p>The current H2 specification (RFC 7540) is based primarily on the SPDY protocol
invented and first used at Google. Google is in a rather unique position to
conduct research on this topic because they write the code running large
proportion of both user&rsquo;s browsers, <em>as well as</em> the servers for a large
portion of the web pages those people visit. This allows them to run real
controlled experimental studies on web traffic, to try to guage the best way to
speed up the Web.</p>

<p>Many have voiced concerns that Google&rsquo;s ideas are welcomed to quickly by the
standards committee. However, supporters are eager to get the ball rolling on
any good ideas, and point to the fact that Google already has <em>results</em>.</p>

<p>Note that some of the experimental results below were actually obtained using
SPDY rather than H2, but we will not concern ourselves with that because they
are the same in essence. Google Chrome still supports SPDY, but has claimed it
will remove support in 2016 so that there are not two competing
standardizations of basically the same protocol.</p>

<p>In reality, in my Chrome browser, using the &ldquo;HTTP/2 and SPDY indicator&rdquo;
extension, I can see that Google&rsquo;s search results and YouTube videos are served
over SPDY/3 running on top of their still-in-research QUIC protocol which is
meant to replace TCP as the transport layer protocol underneath HTTP. The
&ldquo;indicator&rdquo; reveals that many websites are in fact already being served over
H2, including Twitter. I hope to explore what exactly QUIC does, promises, and
delivers further in my research if there is time and space for it.</p>

<h3>Experimental Results</h3>

<p>Experiments investigating relative performance differences between H1 and H2
have yielded contradictory results (Wang et al.). In (Wang et al.), they found
that H2 generally outperforms H1, except when the task is to transmit <em>large</em>
objects over a <em>high-loss</em> connection. One of the goals in defining H2 is that
it is supposed to be easy to swap-in in-place of H1. This finding indicates
that especially with respect to mobile phones, the H1 optimization techniques
of inlining and concatenating web page resources is the wrong way to
improve performance for H2.</p>

<h3>HTTP for Mobile</h3>

<p>With respect to mobile devices, there are multiple problems with HTTP that are
<em>not</em> addressed by H2 (Erman et al.).</p>

<p>First of all, TCP congestion window part of congestion avoidance (<code>cwnd</code> and
<code>ssthresh</code>) makes it so that dropping a single TCP datagram leads to a
drastically reduced throughput. This is because TCP assumes the packet was
dropped due to network congestion, when in reality, it could have been for any
of the wireless-specific issues (multipath propagation, etc.)</p>

<p>Secondly, bad interactions between the 3G &amp; LTE MAC state machine timeouts and
modern default TCP timeouts and mechanisms lead to datagram <em>retransmissions</em>
with further resets on congestion window state variables, resulting in a
drastically negative impact on throughput.</p>

<h3>Research is needed</h3>

<p>From the system administrators&#8217; perspective, it is still difficult to decide
whether enabling H2 on one&rsquo;s servers is going to have a positive impact on
performance <em>at all</em> (Varvello et al.). The following questions still do not
have good enough answers to make answering that decision easy.</p>

<ol>
<li>What changes to the infrastructure and optimization pipeline are needed to
provide a significant benefit over H1?</li>
<li>What are the best algorithms for leveraging H2&rsquo;s new capabilities for
<em>server push</em> and <em>prioritization</em>?</li>
<li>Why do experiments by different research groups yield such a wide disparity
in results?</li>
<li>Are we unlikely to see any real PLT improvements until we improve the
underlying transport layer protocol?</li>
<li>In what ways is the problem different for mobile?

<ul>
<li>What changes need to be made in the mobile-specific scenario, viz. where
interference, low bandwidth, high latency, and battery life
considerations are major concerns?</li>
</ul>
</li>
</ol>


<h2>Glossary</h2>

<ul>
<li><strong>IETF</strong> (Internet Engineering Task Force) &mdash; a standards organization for
the Internet, which produces &ldquo;RFC&#8221;s (requests for comment) specifying some of
the crucial internet protocols, such as HTTP, TCP, and TLS.</li>
<li><strong>PLT</strong> (Page Load Time) &mdash; the duration between the time at which a user
submits a request for a web page, and the time at which she receives the last
byte of data needed to represent that web page correctly</li>
<li><strong>WWW</strong> (World Wide Web) &mdash; a decentralized collection of resources,
requested and transmitted using <em>HTTP</em></li>
<li><strong>HTTP</strong> (HyperText Transfer Protocol) &mdash; a protocol specifying the way an
HTTP <em>client</em> may upload, download, update, etc. documents on an HTTP
<em>server</em>. Often used for downloading <em>HTML</em> in particular.</li>
<li><strong>TCP</strong> (Transmission Control Protocol) &mdash; a protocol which provides an
application the abstraction of having a reliable pipe across the Internet
into/from which it may send/receive ordered sequences of bytes</li>
<li><strong>HOL blocking</strong> (head-of-line blocking) &mdash; when multiple messages are being
sent, but due to imposed FIFO ordering, messages ready to be sent must wait
for an earlier message which is taking a long time</li>
</ul>


<h2>References</h2>

<ul>
<li>Erman, Jeffrey, et al. &ldquo;Towards a SPDY&#8217;ier mobile web?.&rdquo; <em>Proceedings of the
ninth ACM conference on Emerging networking experiments and technologies.
ACM</em>, 2013.</li>
<li>Grigorik, Ilya. High Performance Browser Networking: What every web developer
should know about networking and web performance. <em>O&#8217;Reilly Media, Inc.</em>, 2013.</li>
<li>Roth, Gregor. &ldquo;HTTP/2 for Java Developers&rdquo;. Retrieved from
<a href="http://www.javaworld.com/article/2916548/java-web-development/http-2-for-">http://www.javaworld.com/article/2916548/java-web-development/http-2-for-</a>
java-developers.html on October 8, 2015.</li>
<li>Stenberg, Daniel aka. bagder. <em>http2 explained</em>, retrieved October 8, 2015;
downloaded as MOBI.</li>
<li>Varvello, Matteo, et al. &ldquo;To HTTP/2, or Not To HTTP/2, That Is The Question&rdquo;
arXiv preprint arXiv:1507.06562 (2015).</li>
<li>Wang, Xiao Sophia, et al. &ldquo;How speedy is SPDY.&rdquo; <em>Proc. of the 11th USENIX
Symposium on Networked Systems Design and Implementation (NSDI)</em>. 2014.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why the WiFi Sucks on the Porch]]></title>
    <link href="http://ethanp.github.io/blog/2015/09/24/why-the-wifi-sucks-on-the-porch/"/>
    <updated>2015-09-24T14:31:30-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/09/24/why-the-wifi-sucks-on-the-porch</id>
    <content type="html"><![CDATA[<h2>Why is WiFi so slow on the porch?</h2>

<p>The problem at my house is that WiFi connectivity is generally fine inside the
house, but while sitting on the porch it is nearly impossible for anyone to
browse the Hinternets. I think a lesson of my <a href="http://www.cs.utexas.edu/~lili/classes/F15-CS386W/">Wireless Networking</a> course
explains this observation.</p>

<p>In Wireless networking we have the situation called the <a href="http://www.wikiwand.com/en/Hidden_node_problem"><strong>Hidden Terminal
Problem</strong></a>, which is the following. Node <code>A</code> is too far from node <code>C</code> to
hear its transmissions, but both are in range of node <code>B</code> which sits between
<code>A</code> and <code>C</code>. Suppose <code>C</code> is currently transmitting data to <code>B</code>. Now <code>A</code> checks
whether any transmissions are currently happening, and finds that there are
none (because it is out of range of <code>C</code>). So <code>A</code> goes ahead and sends data to
<code>B</code>. Now <code>B</code> can&rsquo;t understand either data packet because they collided and
interfered with each other in an unrecoverable way because they were both sent
in the same channel.</p>

<p>I think the porch scenario is simply an example of the <em>Hidden Terminal
Problem</em> above. In my room, my laptop can hear many of my neighbors&#8217; WiFi LAN
networks, but it&rsquo;s the same set that my WiFi router sitting in the closet can
hear. However outside, where there&rsquo;s less cause for signal attenuation, my
laptop can hear many more WiFi LAN networks than the router inside. So the
router checks whether there is congestion, doesn&rsquo;t hear any, and sends the
data. But there <em>is</em>, in fact, congestion, and my computer doesn&rsquo;t receive the
data properly. The data is therefore not <em>ACKd</em>, the router times out on the
<em>ACK</em>, and has to retransmit, and so on. This makes for a <em>far</em> slower
Hinterconnectivity outside on the porch than in my room.</p>

<p>Maybe the lesson learnt is that the WiFi router should be situated in a place
where it can hear more of the outside noise so that it can compensate better
for that noise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bit Twiddling: Data Structure Alignment]]></title>
    <link href="http://ethanp.github.io/blog/2015/09/23/bit-twiddling-data-structure-alignment/"/>
    <updated>2015-09-23T11:44:04-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/09/23/bit-twiddling-data-structure-alignment</id>
    <content type="html"><![CDATA[<p>In order to align a data structure at the nearest word-alignment to a given
starting address, we&rsquo;d must find the smallest multiple of N (a power of 2)
which is greater than or equal to integer X. Is there a way we can <em>make this
fast</em>, i.e. not use division or modulo?</p>

<h2>First Thoughts</h2>

<h3>First of all</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">&gt;</span> <span class="n">X</span><span class="p">)</span> <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Otherwise, we have two cases</h3>

<h4>First Case</h4>

<pre><code>N: 00100
X: 01100
--------
=&gt; 01100
</code></pre>

<p>This example indicates the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">X</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span> <span class="k">return</span> <span class="n">X</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Second Case</h4>

<pre><code>N: 00100       
X: 01101       
--------       
=&gt; 10000       
</code></pre>

<p>Which can be accomplished by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">X</span> <span class="o">|</span> <span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have the first-take program of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">&gt;</span> <span class="n">X</span><span class="p">)</span> <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">X</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span> <span class="k">return</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">X</span> <span class="o">|</span> <span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Engineering Wisdom</h2>

<p>The above solution is in fact correct <em>(takes a quick bow)</em>.</p>

<p>When I looked up a better answer on <a href="http://stackoverflow.com/questions/19450743">StackOverflow</a>, I found a
program that does not use conditionals, and is therefore much faster</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">X</span> <span class="o">+</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, it was not obvious to me that this program works! Let&rsquo;s peer inside
and see how similar it is to my solution.</p>

<p>First we&rsquo;re going to compute something, and then we&rsquo;re going to &ldquo;and&rdquo; it with
<code>~(N-1)</code>. Well, &ldquo;and&#8221;ing <em>anything</em> against <code>~(N-1)</code> is going to round it down
to a multiple of N. So that part is taken care of.</p>

<p>Now we need to get the <em>right</em> multiple of N. <code>if X &lt; N</code>, then then adding X to
N and rounding down to a multiple N is just going to give us N. That&rsquo;s the
first line of my answer, taken care of.</p>

<p>So <code>if X &gt; N</code>, we either do or don&rsquo;t have bits in place values below N. This is
what my last two lines are taking care of. However, we can deal with this by
noting that after we add X to N, if there are bits in place values below N,
when we subtract 1, it will not change any bits that will survive the &ldquo;and&rdquo;
stage. But if there are no bits in place values below N, then subtracting one
will decrement our answer wrt bits N and higher.</p>

<p>Hmm, not the best explanation of all time. But that&rsquo;s what&rsquo;s going on in there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoiding Sign Extension]]></title>
    <link href="http://ethanp.github.io/blog/2015/09/11/avoiding-sign-extension/"/>
    <updated>2015-09-11T20:12:42-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/09/11/avoiding-sign-extension</id>
    <content type="html"><![CDATA[<p>I was looking at an implementation of file-based mergesort <a href="https://github.com/cowtowncoder/java-merge-sort">from GitHub</a>, and found the following snippet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Author: cowtowncoder</span>
</span><span class='line'><span class="cm"> * https://github.com/cowtowncoder/java-merge-sort/blob/master/src/main/java/com/fasterxml/sort/std/ByteArrayComparator.java</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Simple implementation of comparator for byte arrays which</span>
</span><span class='line'><span class="cm"> * will compare using &lt;code&gt;unsigned&lt;/code&gt; byte values (meaning</span>
</span><span class='line'><span class="cm"> * that 0xFF is creator than 0x00, for example).</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ByteArrayComparator</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o1</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">o2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// alas, sign extension means we must do masking...</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="o">(</span><span class="n">o1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">o2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">diff</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">diff</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is the meaning of the remark &ldquo;<code>// alas, sign extension means we must do
masking...</code>&rdquo;? What&rsquo;s the deal with the masking?</p>

<!-- more -->


<p>References</p>

<ol>
<li><a href="http://stackoverflow.com/questions/5147738/supressing-sign-extension-when-upcasting-or-shifting-in-java">Supressing sign extension in Java</a></li>
<li><a href="http://stackoverflow.com/questions/1660856/promotion-in-java">Promotion in Java</a></li>
</ol>


<p><code>ol[i]</code> is a <code>byte</code>, i.e. 8 bits. But if you try to subtract two bytes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0x00</span><span class="o">;</span>
</span><span class='line'><span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="o">;</span>
</span><span class='line'><span class="kt">byte</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will produce a <strong>compiler error</strong>, because Java&rsquo;s <code>-</code> (minus) operator
<em>promotes</em> <code>byte</code>s to <code>int</code>s before <em>performing</em> the <code>-</code>, thus <code>-</code> produces an
<code>int</code>, and you can&rsquo;t assign an <code>int</code> to a <code>byte</code> (without a cast, because you&rsquo;d lose bits).</p>

<p>So what about</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0x00</span><span class="o">;</span>
</span><span class='line'><span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that (according to the spec in the doc comment), we want <code>c</code> to
be <em>negative</em>. However note:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mh">0x00</span> <span class="o">-</span> <span class="mh">0xff</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// becomes this</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="mh">0xffffffff</span><span class="o">;</span> <span class="c1">// 0 - (-1) = 1 &quot;sign extension&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now <code>c = 1</code> instead of <code>-255</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// But this</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="err">`</span><span class="mh">0x00</span><span class="err">`</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="err">`</span><span class="mh">0xff</span><span class="err">`</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// becomes this</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="err">`</span><span class="mh">0x00</span><span class="err">`</span> <span class="o">&amp;</span> <span class="mh">0x000000ff</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="err">`</span><span class="mh">0xff</span><span class="err">`</span> <span class="o">&amp;</span> <span class="mh">0x000000ff</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// which becomes this</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="mh">0x000000ff</span><span class="o">;</span> <span class="c1">// 0 - 255 = -255 (avoided sign extension)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So because of the masking, we avoided sign extension, and now <code>c = -255</code>, which
is what we wanted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics of Wireless Communication]]></title>
    <link href="http://ethanp.github.io/blog/2015/09/07/basics-of-wireless-communication/"/>
    <updated>2015-09-07T15:45:58-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/09/07/basics-of-wireless-communication</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing the readings for my <a href="http://www.cs.utexas.edu/~lili/classes/F15-CS386W/">Wireless Networking course</a> at
UTexas, and in the process have dug into much of the basics of radios and
networks that I had ignored in the past. Here, I will try briefly describe what
I have learned. Maybe not everything I will say here is exactly correct, but I
think it&rsquo;s at least <em>mostly</em> correct.</p>

<p>Let&rsquo;s try to start somewhere near the beginning. Our <strong>goal</strong> is to transfer a
<em>information</em> from one location <code>LocSND</code> to another <code>LocRCV</code> <em>conveniently</em>.
The way we will accomplish that is by having <code>LocSND</code> manipulate the
<em>electromagnetic field</em> around <code>LocRCV</code>. More specifically, we will <em>encode</em> a
binary <em>dataframe</em> as <em>modulations</em> of a <em>radio signal</em> around a pre-determined
<em>carrier frequency</em>.</p>

<p>How do we <em>do</em> that?</p>

<!-- more -->


<p>We use an LRC circuit to make electrons oscillate in an
antenna. These oscillating electrons ram into loose and excitable electrons in
the antenna&rsquo;s metal, this releases a photon at a particular frequency. Globally
(i.e. within the entire transmitting antenna), enough photons are being
released that it seems to an external observer looking at the produced
electromagnetic (EM) field like there is a continuous signal being emitted.</p>

<p>So we&rsquo;re sending these EM ripples, which are generally at our carrier
frequency. However, if we just sent a basic frequency, there would be no
<em>information</em> in there, so we have to <em>modulate</em> it. We can modulate its
amplitude (A), phase (phi), and frequency (omega), the 3 free
parameters of the equation (in the top left of the equation in the following
gif from &ldquo;sengpielaudio&rdquo;)</p>

<p><img src="http://www.sengpielaudio.com/Sinuskurve01.gif" alt="sine wave" /></p>

<p>This would give us
1. <strong>Carrier frequency</strong> &mdash;&ndash; the EM frequency <em>inside</em> which our signal is
  encoded
2. <strong>amplitude shift keying (ASK)</strong> &mdash; send signal at <em>carrier frequency</em> by
   modulating the signal&rsquo;s <em>amplitude</em>
3. <strong>frequency shift keying (FSK)</strong> &mdash; similar but modulates <em>frequency</em>
4. <strong>phase shift keying (PSK)</strong> &mdash; again, but modulates <em>phase</em></p>

<p>One simple method would be to say our carrier frequency is 5 Hz, but our band
is actually [4,6] Hz. So whenever the signal is 4 Hz, that means I&rsquo;m sending a
0, and if the signal is 6 Hz, it means I&rsquo;m sending a 1, and a new digit starts
every 1 ms. That would be an example of <strong>FSK</strong>.</p>

<p>A fundamental problem that we must solve is that all senders and receivers of
information via EM fields with their antenna(s) are sharing the a single
<em>medium</em> for transmitting that field (viz. the air, etc.). So if <code>LocSND</code> sends
a message to <code>LocRCV_1</code>, then <code>LocRCV_2</code> sitting one foot away can hear that
message loud and clear. This leads to three major issues: <strong>security</strong>,
<strong>multiplexing</strong>, and <strong>interference</strong>.</p>

<p>To <strong>multiplex</strong> means to send multiple distinct signals through a single
channel. How are we going to send distinct signals to receivers 1 and 2 in such
a way that both can understand the signal meant for them? We can chop up the
frequency band that our transmitter can use into 2 smaller bands, and use each
of those bands as separate carriers. Then we tune the receivers to pick up
frequencies in their respective bands. This is what is called <strong>frequency
division multiplexing (FDM)</strong>, but we can also multiplex across space, time,
and <em>code</em>.</p>

<p>Of course, I&rsquo;ve only scratched the very surface of what&rsquo;s going on here, but
that&rsquo;s all the time I&rsquo;ve got.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pattern in the Stone: Review and Summary]]></title>
    <link href="http://ethanp.github.io/blog/2015/08/23/a-pattern-in-the-stone-review-and-summary/"/>
    <updated>2015-08-23T14:56:25-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/08/23/a-pattern-in-the-stone-review-and-summary</id>
    <content type="html"><![CDATA[<h3>How I Found it</h3>

<p>I was watching a biography of Richard Feynman, and they interviewed this guy W.
Daniel Hillis, and he seemed like a cool dude so I looked him up on Google, and
came across his book, <strong><em>The Pattern in the Stone: The Simple Ideas that Make
Computers Work</em></strong> (1999). On Amazon it was compared to <strong><em>Code: The Hidden
Language of Computer Hardware and Software</em></strong>, by Charles Petzold, an
encredibly well- written book about how computers work. I would gladly read any
book considered comparable in lucidity to <em>Code</em>, so I got <em>The Pattern in the
Stone</em>.</p>

<h3>What it says</h3>

<p>The first few chapters are meant to give a basic understanding of what a
computer is actually doing, and he spends some time noting the Universality of
computers, which he says shows that &ldquo;all computers are alike in what they can
and cannot do&rdquo;. Personally, my intuition of the workings of a computer comes
mainly from an explanation by Richard Feynman himself (<a href="https://www.youtube.com/watch?v=EKWGGDXe5MA">as seen on the
YouTubes</a>) which is &ldquo;heuristic&rdquo; rather than mechanical. Basically
Feynman gradually turns a human being into a computer, and then talks about how
this mechanistic person can be implemented using logic gates built from water
pipes that he sketches on a whiteboard. In <em>Pattern in the Stone&#8221;</em>, he builds
logic gates out of parallel and series wires, and also out of springs and
pivots.</p>

<p>Then he introduces finite state machines and programming in LOGO. Then he
mentions how machine code can be thought of as <em>control instructions</em>,
specifying the next instruction to fetch and execute, and <em>processing
instructions</em>, moving data to and from memory, and through the Arithmetic Logic
Unit.</p>

<p>Then he starts really getting into what I think is the main point of the book,
to convince the reader that there is no magical process occurring in our brains
that a mechanical computer cannot replicate, meaning that</p>

<blockquote><p>As far as we know, no device built in the physical universe can have any more
computational power than a Turing machine&hellip;[so] a universal computer with
the proper programming should be able to simulate the function of a human
brain.</p></blockquote>

<!-- more -->


<p>Then he explains a bit about quantum computing. He notes that when a water
molecule is formed, its atoms must &ldquo;know&rdquo;/&ldquo;compute&rdquo; the appropriate angle
between their bonds. Computational approximation methods of determining this
angle are slow, but the water molecule does it &ldquo;almost instantaneously&rdquo;.</p>

<blockquote><p>One way of explaining how the water molecule can make the same calculation is
to imagine it trying out every possible configuration simultaneously— in
other words, using parallel processing. Could we harness this simultaneous
computing capability of quantum mechanical objects to produce a more powerful
computer? Nobody knows for sure.</p></blockquote>

<p>He notes that although it would certainly be possible, &ldquo;there is no evidence
whatsoever&rdquo; of the human brain leveraging quantum mechanics in its operation.</p>

<p>Then he defines an algorithm as a procedure for provably solving a problem, and
a heuristic as a rule that <em>tends</em> to get the right answer. Then he uses this
to describe a chess-playing AI using alpha-beta pruning.</p>

<p>After discussing encryption and encodings, he moves on to parallelism. He notes
that a computer analyzing a photo has to look at the image pixel-by-pixel, but
the human brain seems to process the entire photo, even comparing it to
previously seen photos, very quickly, even though neurons themselves are
comparatively slow.</p>

<p>Then he goes into one of those bold claims of an expert that are very fun to
read:</p>

<blockquote><p>As computers on the network begin to exchange interacting programs instead of
just electronic mail, I suspect that the Internet will start to behave less
like a network and more like a parallel computer. I suspect that the emergent
behavior of the Internet will get a good deal more interesting.</p>

<p>As the information available on the Internet becomes richer, and the types of
interaction among the connected computers become more complex, I expect that
the Internet will begin to exhibit emergent behavior going beyond any that
has been explicitly programmed into the system.</p></blockquote>

<p>To me this statement seems vague enough to <em>definitely</em> be true. I would
imagine that already, the interaction between different high-frequency-trading
systems display emergent behaviors, though I have no idea.</p>

<p>Then he gets to machine learning. He notes that computers need three
ingredients for learning: a goal, a measure of how far off they are from that
goal, and a way to reduce that distance. He describes the similarities of
&ldquo;artificial neural networks&rdquo; with the human brain. He mentions that by building
up a multi-layer artificial neural network larger abstractions can be encoded
in the weights connecting the neurons.</p>

<p>Finally, he gets to my favorite part of the book: how to build AI that understands humanity</p>

<blockquote><p>I believe that we may be able create an artificial intelligence long before
we understand natural intelligence, and I suspect that the creation process
will be one in which we arrange for intelligence to emerge from a complex
series of interactions that we do not understand in detail— that is, a
process less like engineering a machine and more like baking a cake or
growing a garden. We will not engineer an artificial intelligence; rather, we
will set up the right conditions under which an intelligence can emerge.</p>

<p>[The practice in systems engineering] of &ldquo;divide and conquer&rdquo; works very
well, but an evolved object like the brain does not necessarily have this
kind of hierarchical structure.</p>

<p>The brain is much more complicated than a computer, yet it is much less prone
to catastrophic failure. The contrast in reliability between the brain and
the computer illustrates the difference between the products of evolution and
those of engineering. A single error in a computer’s program can cause it to
crash, but the brain is usually able to tolerate bad ideas and incorrect
information and even malfunctioning components.</p>

<p>So, in creating an artificial intelligence, what is the alternative to
engineering? One approach is to mimic within the computer the process of
biological evolution.</p></blockquote>

<p>He notes how he created a sorting algorithm that outperformed quicksort by <em>evolving</em> it using sequences of computer instructions. <em>Whoa!</em></p>

<blockquote><p>One of the interesting things about the sorting programs that evolved in my
experiment is that I do not understand how they work. I have carefully
examined their instruction sequences, but I do not understand them.</p>

<p>If the safety of the airplane depended on sorting numbers correctly, I would
rather depend on an evolved sorting program than on one written by a team of
programmers.</p></blockquote>

<p>This book is super cool.</p>

<blockquote><p>I suspect that consciousness is a consequence of the action of normal
physical laws, and a manifestation of a complex computation</p></blockquote>

<p>This is the same conclusion me and some friends reached this past spring at the
end of a weeks-long discussion.</p>

<blockquote><p>but to me this makes consciousness no less mysterious and wonderful— if
anything, it makes it more so. Between the signals of our neurons and the
sensations of our thoughts lies a gap so great that it may never be bridged
by human understanding. So when I say that the brain is a machine, it is
meant not as an insult to the mind but as an acknowledgment of the potential
of a machine. I do not believe that a human mind is less than what we imagine
it to be, but rather that a machine can be much, much more.</p></blockquote>

<p>What a beauty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Workflow and Scripts for Learning From Github]]></title>
    <link href="http://ethanp.github.io/blog/2015/08/11/a-workflow-and-scripts-for-learning-from-github/"/>
    <updated>2015-08-11T17:48:41-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/08/11/a-workflow-and-scripts-for-learning-from-github</id>
    <content type="html"><![CDATA[<h3>My &ldquo;Learning&rdquo; Workflow</h3>

<p>As I wrote about <a href="http://ethanp.github.io/blog/2015/08/06/how-apm-originally-worked/">before</a>, I have developed an interesting method of learning
from experts, which can be summarized as follows:</p>

<ol>
<li>Fork their repo on GitHub</li>
<li>Clone the repo locally and &ldquo;detach the <code>HEAD</code>&rdquo; to the &ldquo;inital commmit&rdquo;</li>
<li>Now repeat the following <code>while (curious)</code>

<ol>
<li>Open the working tree in an editor/IDE</li>
<li>If there&rsquo;s something runnable, run it</li>
<li>Understand everything going on in the working tree

<ul>
<li>Take hints from the commit message</li>
</ul>
</li>
<li>Advance <code>HEAD</code> one commit</li>
<li>View the diff from the previous commit</li>
</ol>
</li>
</ol>


<!-- more -->


<h3>SourceTree cannot handle this workload</h3>

<p>I have always used Atlassian&rsquo;s Git GUI called SourceTree for all of my Git
usage because it is a <em>great</em> application, but the fact is, it will not work
for the workflow above. SourceTree has to rebuild the list of commits <em>all the
time</em> (startingfrom the most recent), and when there are thousands of commits,
that can take about a minute. But since I&rsquo;m always operating at the beginning
of the reverse end of the commit log, using SourceTree is untenable. For
whatever reason they decided it was a better idea not to keep all these commits
in memory after they are loaded the first time. I&rsquo;m not saying that was a bad
decision, because my workflow here may be <em>atypical</em>.</p>

<h3>Git is a DAG pointing back in time</h3>

<p>From what I understand&mdash;which is not (yet) a whole lot&mdash;Git is a DAG of
&ldquo;snapshots&rdquo; of the state of your project. Each snapshot points to its parents.</p>

<p>In a typical case, you&rsquo;ll load a snapshot, edit your working directory, add the
changes into the staging area, and <strong>commit</strong> a new snapshot which equals the
previous snapshot, plus the staged changes. Now your new commit has <em>one</em>
parent: the previous snapshot.</p>

<p>A <strong>merge commit</strong> would have <strong>two parents</strong>: the previous commit on the
branch being committed to, and the previous commit on the branch being merged-
in.</p>

<h3>The Learning workflow flows the wrong way</h3>

<p>The Learning worflow would require pointers to the <em>next</em> commit, not just
back-pointers. So it doesn&rsquo;t quite fit the Git mold, and we require a
workaround.</p>

<p>That&rsquo;s where StackOverflow saves the day. <a href="http://stackoverflow.com/questions/2121230/git-how-to-move-back-and-forth-between-commits/23172256#23172256">Here</a> someone modified
a StackOverflow answer by someone else to a <em>related</em> question, and produced
wrappers that help you traverse back and forth between commits. I reproduce an
explicated and slightly simplified version below which may be added to your
shell config file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">#</span> <span class="n">checkout</span> <span class="n">prev</span> <span class="o">(</span><span class="n">older</span><span class="o">)</span> <span class="n">revision</span>
</span><span class='line'><span class="n">git_prev</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">move</span> <span class="nc">HEAD</span> <span class="s">&quot;one&quot;</span> <span class="n">generation</span> <span class="n">back</span> <span class="n">along</span> <span class="o">*</span><span class="k">this</span><span class="o">*</span> <span class="n">branch</span>
</span><span class='line'>    <span class="n">git</span> <span class="n">checkout</span> <span class="nc">HEAD</span><span class="o">~</span><span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">#</span> <span class="n">checkout</span> <span class="n">next</span> <span class="o">(</span><span class="n">newer</span><span class="o">)</span> <span class="n">commit</span>
</span><span class='line'><span class="n">git_next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">git</span> <span class="n">show</span> <span class="n">ref</span><span class="k">:</span>
</span><span class='line'>    <span class="k">#</span>       <span class="kt">show</span> <span class="o">(</span><span class="kt">commit-sha</span><span class="o">,</span> <span class="kt">ref-name</span><span class="o">)</span> <span class="n">pairs</span> <span class="k">for</span> <span class="n">current</span><span class="o">-</span><span class="n">versions</span> <span class="n">of</span> <span class="n">all</span>
</span><span class='line'>    <span class="k">#</span>       <span class="s">&quot;refs&quot;</span><span class="o">;</span> <span class="n">i</span><span class="o">.</span><span class="n">e</span><span class="o">.</span> <span class="n">tags</span><span class="o">,</span> <span class="n">remote</span> <span class="n">branches</span><span class="o">,</span> <span class="n">and</span> <span class="n">local</span> <span class="n">branches</span>
</span><span class='line'>    <span class="k">#</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">git</span> <span class="n">show</span><span class="o">-</span><span class="n">ref</span> <span class="o">-</span><span class="n">s</span> <span class="nc">HEAD</span><span class="k">:</span>
</span><span class='line'>    <span class="k">#</span>       <span class="kt">get</span> <span class="kt">sha</span> <span class="kt">of</span> <span class="kt">latest</span> <span class="kt">commit</span> <span class="kt">on</span> <span class="kt">branch</span> <span class="kt">pointed</span> <span class="kt">to</span> <span class="kt">by</span> <span class="kt">HEAD</span>
</span><span class='line'>    <span class="k">#</span>
</span><span class='line'>    <span class="k">#</span> <span class="nc">BRANCH</span><span class="o">=...</span><span class="k">:</span>
</span><span class='line'>    <span class="k">#</span>       <span class="kt">get</span> <span class="kt">the</span> <span class="kt">name</span> <span class="kt">of</span> <span class="kt">the</span> <span class="kt">branch</span> <span class="kt">HEAD</span> <span class="kt">is</span> <span class="kt">on</span>
</span><span class='line'>    <span class="k">#</span>
</span><span class='line'>    <span class="nc">BRANCH</span><span class="o">=</span><span class="n">`git show-ref | grep $(git show-ref -s HEAD) | sed &#39;s|.*/||&#39; | grep -v HEAD | sort -u`</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="n">get</span> <span class="n">the</span> <span class="n">hash</span> <span class="n">of</span> <span class="n">the</span> <span class="n">latest</span> <span class="n">commit</span> <span class="n">on</span> <span class="n">the</span> <span class="n">current</span> <span class="n">branch</span>
</span><span class='line'>    <span class="nc">HASH</span><span class="o">=</span><span class="n">`git rev-parse $BRANCH`</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">list</span> <span class="o">--</span><span class="n">topo</span><span class="o">-</span><span class="n">order</span> <span class="nc">HEAD</span><span class="o">..</span><span class="nc">$HASH</span><span class="k">:</span>
</span><span class='line'>    <span class="k">#</span>       <span class="kt">list</span> <span class="kt">all</span> <span class="kt">commit</span> <span class="kt">sha</span><span class="err">&#39;</span><span class="kt">s</span> <span class="kt">in</span> <span class="kt">order</span> <span class="kt">on</span> <span class="kt">the</span> <span class="kt">current</span> <span class="kt">branch</span> <span class="kt">from</span>
</span><span class='line'>    <span class="k">#</span>       <span class="nc">HEAD</span> <span class="n">until</span> <span class="n">now</span>
</span><span class='line'>    <span class="k">#</span>
</span><span class='line'>    <span class="k">#</span> <span class="nd">@return</span> <span class="n">the</span> <span class="n">commit</span> <span class="n">sha</span> <span class="k">for</span> <span class="n">the</span> <span class="n">commit</span> <span class="n">after</span> <span class="nc">HEAD</span> <span class="n">on</span> <span class="n">branch</span>
</span><span class='line'>    <span class="k">#</span>
</span><span class='line'>    <span class="nc">PREV</span><span class="o">=</span><span class="n">`git rev-list --topo-order HEAD..$HASH | tail -1`</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="n">move</span> <span class="n">head</span> <span class="n">to</span> <span class="n">the</span> <span class="n">next</span> <span class="n">commit</span>
</span><span class='line'>    <span class="n">git</span> <span class="n">checkout</span> <span class="nc">$PREV</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that knowledge in tow, I also made a little command to jump to the <em>i</em>&lsquo;th
commit on master. If you&rsquo;re trying to jump to the <em>i</em>&#8216;th commit on the current
branch, get the current branch using the <code>BRANCH=...</code> code above, and pass it
to <code>rev-list</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">gitj</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">git</span> <span class="n">checkout</span> <span class="n">`git rev-list master | tail -n$1 | head -n1`</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">$</span> <span class="n">gitj</span> <span class="mi">1</span>    <span class="k">#</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">initial</span> <span class="n">commit</span> <span class="n">of</span> <span class="n">master</span>
</span><span class='line'><span class="n">$</span> <span class="n">gitj</span> <span class="mi">3</span>    <span class="k">#</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">third</span> <span class="n">commit</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wrappin it up</h3>

<p>So yeah, now the workflow is simpler to use and it was made possible by gaining
a better understanding of how Git works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Apm Originally Worked]]></title>
    <link href="http://ethanp.github.io/blog/2015/08/06/how-apm-originally-worked/"/>
    <updated>2015-08-06T20:17:12-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/08/06/how-apm-originally-worked</id>
    <content type="html"><![CDATA[<p>Over the past few days I have been learning how <code>apm</code>, the Atom Package Manager
works under the hood. <code>apm</code> is what you use when, in GitHub&rsquo;s (relatively new)
&ldquo;Atom&rdquo; text editor, you go to the nice gui package installation interface under
<code>settings=&gt;packages</code>.</p>

<p>Atom is a &ldquo;hackable&rdquo; text editor built on top of Chromium, using Node.js and
Coffeescript. I believe they call it hackable because all the code is open
source, and you can add plugins to do whatever you want. Your plugins can even
be written in C++ if that&rsquo;s more your style.</p>

<p>My goal was to figure out how <code>apm</code> works, and I wasn&rsquo;t sure how best to do
that. My knowledge of Node.js was minimal, and I was no expert in Coffeescript.
What I decided to do was fork the <code>apm</code> GitHub repo, clone it onto my computer,
and set my local HEAD to the <a href="https://github.com/atom/apm/commit/b8f4ce0d0cda458853eb280fde39fdeb2de38ebd">&ldquo;initial commit&rdquo;</a>, and see if I could
understand that. The complete contents are as follows</p>

<figure class='code'><figcaption><span>README.md</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># APM - Atom Package Manager
</span><span class='line'>
</span><span class='line'>Discover and install Atom packages.
</span></code></pre></td></tr></table></div></figure>


<p>At this stage I pretty confident that I understood everthing the author Kevin
Sawicki was doing. Lucky for me, it seems Kevin is rather unique on GitHub&rsquo;s
Atom development team for having smaller commits. I can justify this by noting
that on Atom-core&rsquo;s <a href="https://github.com/atom/atom/graphs/contributors">list of developer contributions</a>, he has 2x more
commits than the next guy, but is not in the top 5 in terms of LOC added.</p>

<p>So with my head fully wrapped around the &ldquo;initial commit&rdquo; I moved my HEAD past
the 2nd commit (a typo fix) into the first commit of any substance, <a href="https://github.com/atom/apm/commit/31294702b11061e60214357f4529fb9b00a7068d">&ldquo;Add
initial Gruntfile, binary, and ignores&rdquo;</a>. At this point there was some
investigation to do.</p>

<!-- more -->


<p>I learned how he&rsquo;s setting his default <code>grunt</code> task to
compile his Coffeescript source files from the <code>src</code> directory into a <code>lib</code>
directory to be generated at compile time. I learned the basics of <a href="http://browsenpm.org/package.json">what a
<code>package.json</code> is</a> and what it&rsquo;s basic fields do. And I learned how
<code>require('path')</code> command works by loading the <code>module.exports</code> object of
either the file at the specified path, or in the dependencies, etc. <a href="https://nodejs.org/api/modules.html">as
specified here</a>. At this point I was good to go on understanding
the first half-hour of development on this project by mister Sawicki.</p>

<p>Basically, I continued in this manner, covering test-driven-development and
unit-testing using <code>jasmine-node</code>, a primitive API with only two endpoints
using <code>express.js</code> as part of a test-case, test fixtures, asynchronous vs
synchronous I/O APIs in various Node modules, and so on, and in the process
learned how <code>apm</code> originally <em>worked</em>.</p>

<h3>How APM originally worked</h3>

<p>It basically just wraps the normal <code>npm</code> command to pull from a different
registry set up presumably by Mr. Sawicki. An <code>npm</code> registry is a CouchDB
instance, where module names, versions, and other metadata are mapped to the
relevant gzipped-tarball.</p>

<p>At first, there was a bit of complicated code where <code>apm</code> was downloading and
installing <code>node</code>, <code>npm</code>, and <code>node-gyp</code> itself, but eventually, these last two
were just <a href="https://github.com/atom/apm/commit/aa480a05e52d14baf56c06517826babd17ae4182">added as dependencies</a>. This involved an
<a href="https://github.com/caolan/async#waterfalltasks-callback"><code>async.waterfall</code></a> which to my naive judgement about such a simple
script seemed to be a bit of overkill.</p>

<p>One thing I noticed was that a <em>lot</em> of the more complicated bits tended to
disapear over time, getting replaced by packages (e.g. <code>wrench</code>, <code>rimraf</code>,
etc.) or replaced by finding a simpler way to do the same thing (like passing
the appropriate command line option to the underlying <code>npm</code>).</p>

<p>It has felt, watching the first stage of this project come together, like I
have been able to peer over the shoulder of a far superior coder as he writes
what eventually has come to be one of the <a href="http://qr.ae/RA68mn">main selling points</a> of the
Atom text editor itself. I have learned countless lessons. It is like that
tutorial that he never had the chance to write. When someone writes a tutorial
they generally are nervous and keep trying to explain the same thing in
different ways and it never quite makes sense. When someone is writing a
significant piece of a public work, they are strictly getting down to business.
Kevin may not have expected anyone to come along and piece through his thought
process, but he left it out on the table anyway and I just grabbed it.</p>

<p>I will continue to go through this git history to find out what happens in the
next chapter. I will also keep this in mind for the future as a way to find out
how something was made. I&rsquo;ve got my eye in particular on watching Linus write
<a href="https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290">git itself</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Further Adventures in Collaboration]]></title>
    <link href="http://ethanp.github.io/blog/2015/08/05/further-adventures-in-collaboration/"/>
    <updated>2015-08-05T23:45:05-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/08/05/further-adventures-in-collaboration</id>
    <content type="html"><![CDATA[<h3>Getting to the same page</h3>

<p>When a colleague and I are in a discussion about something and both start to
get very excited about where it is going, I start to believe that we both must
be seeing things in the same way. This is a fantasy. You start to feel that
&ldquo;connection&rdquo;; it gets palpable. It feels like we&rsquo;re really communicating
consciousness to consciousness. It feels like thoughts are pipelining across
thin air. Sometimes it&rsquo;s true, but I&rsquo;d posit that usually it is not. And this
misunderstanding of the true level of agreement can later be a cause of grief.
You feel like the other person abandoned your shared vision when they take the
result of your conversation and make something different from what you
intended.</p>

<!-- more -->


<p>In a recent project, my partner and I have both had a lot of excitement about
where it&rsquo;s going. Obviously the excitement is a prerequisite for us to want to
continue to work together, but it is tiring to think we&rsquo;re on the same page and
in fact not be. So I proposed that he make a document outlining exactly what
we&rsquo;re doing so that I can come to grips with what he envisions. We both found
that creating this document was enormously helpful, however, the problem is
that I don&rsquo;t want to get bogged down in formalities, and I don&rsquo;t want to set
anything in stone that should remain fluid or even unspecified. I want to cut
to the exciting part, which involves construction and creativity, and skip all
the boring crap. In the end I can&rsquo;t tell how much predetermination is useful.
So far, just running forward has not been very productive, so we keep crawling
back into the pre-planning phase. Surely that can&rsquo;t keep happening forever,
evenutally we will have pre-planned the whole thing out; but I don&rsquo;t want to
have to pre-plan the whole thing out.</p>

<p>Working with another person is a truly different beast than going it alone. You
have to decide who is responsible for what. We both bring very different skills
to the table and it is clear that we will need all of them. Some skills need to
be brought to the table that <em>neither</em> of us possess, and it is not clear who
will be the one to provide those. So far he&rsquo;s been the one with ideas and I&rsquo;ve
been the one with direction. So I direct him where to put his ideas, and from
those ideas I keep the good and throw away the bad. Is that a healthy dynamic?
I don&rsquo;t know. I want to remain in a place where we both trust each other&rsquo;s
judgement and don&rsquo;t hold back, because otherwise that&rsquo;s how tension builds. I
think so far this has gone decently well.</p>

<p>But I wonder if being the &ldquo;judger&rdquo; is a negative spiritual influence. So that
was why I started contributing to the creative output. He was very receptive to
this even though he knows I&rsquo;m not the one with the ideas. Maybe when I have
ideas and let him judge them, we&rsquo;ll each get a feel for how hard the other&rsquo;s
position is and start to become better at our own roles. That only makes sense.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is an Abstraction]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/28/what-is-an-abstraction/"/>
    <updated>2015-07-28T23:23:05-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/28/what-is-an-abstraction</id>
    <content type="html"><![CDATA[<p>After some further thought, it has become clear that my previous post about
abstractions and what makes them good got it all wrong. There, I said roughly
that an abstraction is something that allows you to simplify a hard mental task
to make that task easier. This needs to be reevaluated. The earlier post
claimed that a hammer is an improper abstraction for opening up a package. That
just doesn&rsquo;t sound right. A hammer is nothing more than a bad <em>tool</em> for
opening up a package. A <em>tool</em> is something that makes a task easier. A tool
and an abstraction are not equivalent.</p>

<p>My Software Architecture professor began the semester by giving us about 20
very similar definitions of what software architecture is, to give us a general
sense of what people are talking about. I left the lecture equally uninformed
about what software architecture is, but did eventually come to grips with it.
With the Sisyphean nature of the task now understood, I would like to propose a
new definition:</p>

<blockquote><p>An abstraction is a way of conceptualizing something without having to think
about everything that is actually going on. If we think in terms of the
abstraction, we can arrive at the same conclusions as could have been derived
using the &ldquo;underlying truth of the matter&rdquo; without as much mental effort.
After communicating the chain of logic using the abstraction, the listener
would also be able to derive the result by substituting the abstraction out
for the &ldquo;underlying truth&rdquo;.</p></blockquote>

<p>It is basically a mental shorthand.</p>

<!-- more -->


<p>Here is a revised list of abstractions</p>

<ol>
<li>Programming languages &mdash; the &ldquo;truth&rdquo; is generally a sequence assembly
operations</li>
<li>The Unix filesystem &mdash; the truth is locations of files on disk</li>
<li>Mathematical notation &mdash; the truth is the actual mathematical operations
ascribed to the notation; this is related to the programming languages item</li>
<li>Design patterns &mdash; the truth is a particular organization of logical
constructs provided by a programming language</li>
<li>Object oriented programming &mdash; the truth is a set of structs and
corresponding procedures</li>
<li>A compressed file &mdash; the truth is the file that was compressed</li>
</ol>


<p>It is this sense of abstraction which I believe to be of monumental importance
for making progress scientifically, technologically, culturally, etc.</p>

<p>One thing that completely surprised me when starting to learn about computers,
is that in programming, one builds &ldquo;layers of abstraction.&rdquo; But those layers
are built on layers, are built on layers, etc. until you get down to the logic
gates, etc. So a programming language is an abstraction with an implementation:
there is a &ldquo;function&rdquo; (known as a compiler) which maps the written program into
a sequence of instructions. But an abstraction needn&rsquo;t have an function mapping
it to its underlying truth.</p>

<p>How did I get caught up in some sort of philosphical meandering? It feels
important to have a firmer grasp of what an abstraction is, what makes one
good, and how to go about creating them. The goal is to reduce mental effort in
creating new ideas and communicating them to other humans or to machines. To be
able to do this, it may be important to know what an abstraction is and what it
is not. Now I am sure it is <em>not</em> a hammer, in contrary to what I stated in the
previous post. It is also not Yelp.</p>

<p>So what makes one good? It should allow questions to be asked and answered of
the truth it represents in the terms of the abstraction. It may even invite new
useful questions to be asked. It may also lead to better abstractions. It
should justify the mental effort required to begin thinking in its terms.</p>

<p>How does one create one? It depends</p>

<ol>
<li>Sometimes by extracting what is the same out of multiple instances of
related items (e.g. design patterns)</li>
<li>Sometimes by replacement with a symbol (math notation).</li>
<li>Sometimes by stating the problem in more &ldquo;human&rdquo; terms

<ul>
<li>The Unix filesystem is just a bunch of &ldquo;folders&rdquo; that contain &ldquo;files&rdquo;,
and folders <em>are</em> files too</li>
<li>Object oriented programming allows us to mentally group code into a
<em>thing</em> which <em>does</em> stuff, even though the machine doesn&rsquo;t &ldquo;see&rdquo; it that
way</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Abstraction]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/28/what-makes-a-good-abstraction/"/>
    <updated>2015-07-28T19:39:27-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/28/what-makes-a-good-abstraction</id>
    <content type="html"><![CDATA[<p>Creating good abstractions may have more value than anything else. The more I
learn about creating a company and writing code, the more important I realize
proper abstractions are.</p>

<p>Perhaps I should start by listing a few abstractions that I find to be &ldquo;good&rdquo;
ones so that we&rsquo;re more on the same page, because this an abstract topic, and
everyone probably has a different conception of it. Surely I&rsquo;ve missed some of
the best ones, but these roll off my head:</p>

<ol>
<li>Programming languages (in that they are a higher-level representation of
machine-code)</li>
<li>Object-oriented programming</li>
<li>Design patterns &amp; architectural patterns</li>
<li>The mouse (input device)</li>
<li>A &ldquo;process&rdquo; as used in Unix</li>
<li>Most mathematical notation</li>
</ol>


<p>So what do these have in common? They give us a mental representation of what
we&rsquo;re doing that vastly simplifies what is actually going on. This means that
in order to come up with something which is at its base level very complex, we
only need to manipulate simplified mental objects. These means we must perform
fewer total mental operations, using less mental short-term memory, to achieve
the same result.</p>

<!-- more -->


<p>My Operating Systems professor asked, &ldquo;How do you teach/learn elgance [in
design abstractions]?&rdquo; His answer was two-fold:</p>

<ol>
<li>&ldquo;Study case studies, try to learn lessons&rdquo;</li>
<li>&ldquo;When you build a system, ask yourself &lsquo;What would Ritchie and Thompson
say about my design?&rsquo;&rdquo;</li>
</ol>


<p>Sometimes when we define a good abstraction as one that facilitates mental
operations (as I&rsquo;ve done above) we can say that an elegant abstraction should
reframe what we&rsquo;re doing in terms that a more primitive human would be more
familiar with. A Unix &ldquo;process&rdquo; is basically saying that each concurrently
running program is its own discrete creature who doesn&rsquo;t occupy any parts of
the world that other creatures are occupying, and is capable of thinking and
effecting changes to its external environment, but cannot directly affect other
creatures, except to kill them, wait for them to die, and send mail to their
doorstep.</p>

<p>However, mathematical notation is in a different category, it doesn&rsquo;t really
personify anything, it most often just provides a symbol for something that
would require many words to describe. In the math library at school, I once
picked up some very old mathematical text, and it said something like</p>

<blockquote><p>The value ascribed to the first object can be said to vary in direct
proportion to the inverse of the square of the second.</p></blockquote>

<p>Oh, you mean <code>x = 1/y^2</code>? The real statement was actually much longer and more
confusing, and the representation in mathematical notation would have added
only a few more components. This notational description gets the point across
much faster, although it doesn&rsquo;t really connect with my &ldquo;inner humanity&rdquo;.</p>

<p>With each of these abstractions, we must take (perhaps a lot of) time to build
up facility with them so that they then &mdash;</p>

<p>Oh, I should add <strong>spoken and written language</strong> to that list above, duh!</p>

<p>Anyway, before we begin using an abstraction &ldquo;naturally&rdquo; we must internalize
what it represents. This is generally not easy. It took surprisingly long to
understand the basics object-oriented programming, and hopefully over the next
years I will continue to have zillions of a-ha moments in which more
complexities are bundled up into Lego bricks that can be assemble into assets
of object-oriented programs. But as stated by both Venkat Subramanian and
Martin Odersky with respect to Scala, just because something replaces
complexity with simplicity, doesn&rsquo;t mean it is easy to understand upon first
seeing it.</p>

<p>Perhaps noteworthy of the abstractions in my list above, with the exception
perhaps of item 4, they took <em>thousands</em> of people conceptualizing the same
things over and over again, each refining the abstraction, to achieve the level
of simplicity and generality with which they can be applied today. (Maybe 5 is
an exception too, I&rsquo;m not sure.)</p>

<p>So how does one learn to make a good abstraction? Well, perhaps we can forget
about being the <em>one</em> to invent a really fundamental abstraction. Maybe
information theory was an abstraction almost fully envisioned by one person,
I&rsquo;m not sure. Regardless, a small team of people is surely capable of
leveraging the innovations around them to contribute a further small
abstraction. E.g. sometimes one encounters an especially nice API, which lays
out just the right Lego bricks to be able to create a slew of useful &ldquo;things&rdquo;.</p>

<p>I want to try another case study, which is the Yelp application, because I&rsquo;m
not sure where this is going to go. Does this application fit the hypothetical
definition of an abstraction, reducing the number of mental operations required
to do accomplish an otherwise complicated task? Sure it does; I can find a good
place to by tapping a few buttons that are easy to locate without much thought.
Another thing it does is allow me forget about <em>how</em> I want to find the place
to eat by dealing with that for me. In this case, I&rsquo;m leveraging the effort
provided by Yelp&rsquo;s actual programmers, as well as the data provided by all
those people whom Yelp&rsquo;s algorithms think I am similar to. But I don&rsquo;t have to
think about all that, all I have to do is ask the application where I should
eat.</p>

<p>I want to try another case study, the hammer. I can be cheeky here and note
that my hammer makes every problem look like a nail, so it simplifies my
problems to the case of dealing with a nail, which I simply must whack at to
deal with. But sometimes my problem doesn&rsquo;t fit well into the &ldquo;nail&rdquo; box, and
the hammer will do the wrong thing. For example, when opening up those
impossible plastic packages, a hammer would potentially open the package, but
might break the contents in the process. It successfully reduced the creativity
I needed to solve the problem, but was still in the end an inelegant, or worse,
insufficient, solution.</p>

<p>Abstractions are powerful. They&rsquo;re hard to come up with. Strive for elegance.
Use them to reduce complexity. Use them to reduce the amount of mental
calculations and short term memory required to solve a problem. Just because it
takes a while to understand the abstraction doesn&rsquo;t mean it is bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learnt About Collaboration]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration/"/>
    <updated>2015-07-22T21:16:25-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/22/lesson-learnt-about-collaboration</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest lesson of this summer has been in taking advantage of the
power of collaboration.</p>

<p>When my boss decided to hire me, he told me that it was in large part because
of my communication skills. I don&rsquo;t know if he still agrees with this, but I
like to think it is true.</p>

<p>One of my greatest prides is the ability to openly lose an argument. For a long
time, this has quite often been my reason for entering an argument, and I try
to make it easy to lose. If someone seems to know they&rsquo;re right, we must
together find the bridge of what I&rsquo;m missing that will be convincing beyond a
reasonable doubt of their correctness. Making it easy to lose means figuring
out what you <em>actually</em> think, making that clear, and not wavering from that
initial point of view even when more facts come to light. Or at least
acknowledging that the original viewpoint was incorrect, and now <em>this</em> is what
I [honestly] believe to be true. A regrettable human tendancy is to change
one&rsquo;s opinion during an argument as the facts come to light because &ldquo;with these
facts, my original point of view was wrong, and clearly I wasn&rsquo;t wrong, so that
couldn&rsquo;t have been my real point of view.&rdquo; This needs to be consciously
avoided.</p>

<!-- more -->


<p>But still, I haven&rsquo;t always taken advantage of opportunities to collaborate.
There is a lot of overhead when working with a partner. A lot of your time is
spent explaining to them stuff you already know. These could be things which
took quite a while of staring at text trying to understand, and now it feels
like you&rsquo;re letting them off the hook by just explaining it outright. Sometimes
there are petty disagreements in which I like to code things my way and she
hers, etc.</p>

<p>One small example is that in one project I wanted the code for a very
complicated function to have the following structure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">complicated1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">precondition1</span> <span class="k">=</span> <span class="n">state1</span> <span class="o">!=</span> <span class="n">invalid</span> <span class="o">&amp;&amp;</span> <span class="n">state2</span> <span class="o">!=</span> <span class="n">invalid</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">precondition2</span> <span class="k">=</span> <span class="n">state3</span> <span class="o">!=</span> <span class="n">invalid</span> <span class="o">||</span> <span class="n">state4</span> <span class="o">!=</span> <span class="n">invalid</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">preconditionsMet</span> <span class="k">=</span> <span class="n">precondition1</span> <span class="o">&amp;&amp;</span> <span class="n">precondition2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">preconditionsMet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logError</span><span class="o">(</span><span class="s">&quot;error 1&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="c1">// early escape</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">computationResult</span> <span class="k">=</span> <span class="n">doSomeComputing</span><span class="o">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isValid</span><span class="o">(</span><span class="n">computationResult</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logError</span><span class="o">(</span><span class="s">&quot;error 2&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="c1">// another early escape</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// the main logic here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>whereas my partner wanted something more along the lines of the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">complicated2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state1</span> <span class="o">!=</span> <span class="n">invalid</span> <span class="o">&amp;&amp;</span> <span class="n">state2</span> <span class="o">!=</span> <span class="n">invalid</span>
</span><span class='line'>     <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">state3</span> <span class="o">!=</span> <span class="n">invalid</span> <span class="o">||</span> <span class="n">state4</span> <span class="o">!=</span> <span class="n">invalid</span><span class="o">))</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">computationResult</span> <span class="k">=</span> <span class="n">doSomeComputing</span><span class="o">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isValid</span><span class="o">(</span><span class="n">computationResult</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// the main logic here</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logError</span><span class="o">(</span><span class="s">&quot;error 2&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logError</span><span class="o">(</span><span class="s">&quot;error 1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a petty issue; either way the <em>exact</em> same code is going to execute, and
we each had very good reasons for finding our own way easier to understand. We
didn&rsquo;t bicker over it because we got along very well, and in the end we
actually did it my way. But in reality the actual function was considerably
more complex, and perhaps there were entirely better ways of structuring it
that neither of us noticed.</p>

<p>Now, at work, there is a new-hire considerably more senior and experienced than
I, who started 2 days ago, and who is taking over my project once I go back to
school in a few weeks; so it has been my responsibility to teach him how
everything works. Very often, he feels the need to obsessively ask me: &ldquo;Your
code that says <code>3 + 4</code>, that means you&rsquo;re adding 4 to 3, right?&rdquo; Sometimes he
says &ldquo;right?&rdquo; and I say yes, then he repeats what he said and I repeat &ldquo;yes,
you are correct&rdquo;, and this can continue and I wonder what he is getting out of
that.</p>

<p>At first I resented this because it sometimes felt like no one taught <em>me</em> much
about the codebase when I arrived; for the more complex bits, I just stared at
it until it clicked. This was fun to me, and no one ever seemed to have the
time to go in depth with it anyway. It was good practice at reading others&#8217;
code and understanding what it does. Learning new ways of accomplishing many
things that were unfamiliar. Getting used to seeing code that isn&rsquo;t formatted
<em>my way</em>, and accepting it for <em>what it is</em>. Learning how to utilize their code
from mine even when there is no explicitly exported clean API, and so forth.</p>

<p>But well it was the new-guy&rsquo;s day 3 today, and it seems we have really begun to
click as a duo. It is abundantly clear that he has a <em>wealth</em> of skills I lack.
Sure, he could definitely learn this code without my help, but I benefit a
great deal from seeing how he navigates it. What are the parts that he finds
especially confusing? The importance of variable names shines immediately
through. There are a few patches of code where I worked some Scala feature in
there just to try them out. Some of these turned out to be easier to understand
and reuse code from, and for some of them, something more cut-and-dry would
have been better.</p>

<p>Plus there&rsquo;s the fact that two minds are better than one. He&rsquo;s always
questioning my assumptions. To the point where he often straight up doesn&rsquo;t
believe what I say until I prove it. Sometimes he finds flaws in my arguments.
Sometimes, with my assumptions in hand, he invents better solutions to the
problem. Sometimes he understands what I did better than me and tells me its
advantages and disadvantages and alternatives.</p>

<p>My new partner&rsquo;s oft-stated goal is to get to a point where he can start
contributing to our project without my help, so that our concurrent efforts
will speed things along. People with a smart, helpful attitude like that have
been rare in my experience, so if he&rsquo;s being honest, I&rsquo;m all for taking him to
that place as quickly as I can.</p>

<p>I think maybe I just have a bias that everyone who doesn&rsquo;t know what I know
just wasn&rsquo;t smart enough to realize it. That is the thinking pattern of a real
asshole and this experience is making that abundantly clear. Everyone knows
that when learning something new, everything is always surprisingly confusing,
and then once it clicks, everything becomes &ldquo;trivial.&rdquo; However, I have not
spent much time teaching others, so I haven&rsquo;t had the opportunity to see this
&ldquo;click&rdquo; moment in others, and how dumb they all look before that moment occurs.
I do remember teachers explaining something, and me looking at it sideways in
confusion, and asking them to repeat it slower. This happened on many
occasions, and they must have thought I was a real idiot on each of those
occasions, but I was always so relieved when they did repeat, and I often would
strain my brain muscles and actually (partially) &ldquo;get it&rdquo; the second time
through.</p>

<p>The new-guy has taught me a lot from his attitude in joining a new team at a
new workplace. He&rsquo;s not trying to just &ldquo;set to work&rdquo; writing code willy-nilly
as quickly as possible. Compared to him, that&rsquo;s basically what I did. He wants
to <em>truly</em> understand what&rsquo;s going on. What does the architecture look like?
Who is the expert on what? Who is good at explaining things? Who is willing to
take the time to explain things? What do our users want? What do they expect?
What is the timeline? What has been built? What is he responsible for? What are
the alternative solutions that have been under consideration? Who has decision-
making power? Which teams do we collaborate with?</p>

<p>These are all questions that I know the answers to, as they are the necessary
fundamentals of how to operate and move forward. I started actively learning
the answers to these questions as soon as I arrived as well. However, I wasn&rsquo;t
as conscious and certainly not nearly as thorough at answering them as he is.
And over time I may have slipped a bit into a position of people trusting me to
do the right thing, so I don&rsquo;t feel as pressured to be on the ball with
everything at all times. But his arrival has been a reality check in the
importance of having a firm grip on the fundamentals of what are we doing and
why and how best to accomplish it in a strictly-business manner. There is no
excuse for losing one&rsquo;s professionalism, including having a &ldquo;casual&rdquo; workplace.</p>

<p>So far it has been 3 days. On a personal level of course I have learned more
during those 3 days of working with the new guy than I did during the previous
few weeks of working on my own. During this week I have probably also been
slower to accomplish those tasks remaining to finish before I leave. It is
firmly clear that this is a worthy tradeoff, and I will continue to spend the
rest of my time making sure that I am playing as great a part as possible in
his success in moving our project forward into the future. There maybe some
hiccups in our working relationship, because alas I barely know the guy, and
we&rsquo;re from different societal cultures, and my first impressions of people are
always notoriously off-base. However, now it is clear that the responsibility
is my own to make sure any future road-bumps are known to be my fault and my
problem and mine to fix with his help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside Java's BufferedReader]]></title>
    <link href="http://ethanp.github.io/blog/2015/07/01/inside-javas-bufferedreader/"/>
    <updated>2015-07-01T13:22:50-07:00</updated>
    <id>http://ethanp.github.io/blog/2015/07/01/inside-javas-bufferedreader</id>
    <content type="html"><![CDATA[<p><code>BufferedReader</code> is suprisingly fast for parsing large text files. Why is that?
In my experience, it is faster for this task than a <code>BufferedInputStream</code>.
StackOverflow says this is because the <code>BufferedReader</code> uses <code>char</code> internally
instead of <code>byte</code>.</p>

<p>What follows is a high-level breakdown of what&rsquo;s going on &ldquo;under the hood&rdquo; of
the <code>BufferedReader</code>, i.e. an overview of the implementation details.
Details about <code>mark</code> support will be omitted.</p>

<p>For me, the most significant takeaways are the following</p>

<ol>
<li><strong>There is no magic</strong> &mdash; every time I find this out about something I am
surpised. This class is probably <em>very</em> similar to the way I would have
naively written a buffering wrapper for a <code>Reader</code> object.</li>
<li><strong>Utmost efficiency is sacrificed for code clarity</strong> &mdash; my guess is that the
reason they left in the inefficiencies I mentioned above is because having
special cases would have clouded the code. If someone wants an even <em>more</em>
efficient <code>Reader</code> they are always welcome to write their own.</li>
<li><strong>Small amount of code</strong> &mdash; there&rsquo;s really not a whole lot to this class. It
basically just reads into a buffer, then services incoming reads from that
buffer. There are no &ldquo;niceties&rdquo; or asynchronous callbacks etc. I think the
attitude of the auther is that if you want to find that, simply look
elsewhere.

<ul>
<li>Of particular note: there is no a single mention of <em>character encodings</em>
anywhere in the class.</li>
</ul>
</li>
</ol>


<!-- more -->


<p>Starting with the obvious, a <code>java.io.BufferedReader</code> is <code>java.io.Reader</code> that
holds a buffer to make operations faster. A <code>Reader</code> is an object that reads
character streams. Any subclasser of the <code>abstract class Reader</code> must implement
(at a minimum) <code>read(char[], int, int)</code> and <code>close()</code>. Other reader methods
basically just use these methods to put together the rest of the interface. The
only public method that <code>BufferedReader</code> adds to the <code>Reader</code> interface is
<code>String readLine()</code>, which is described below.</p>

<p>Let&rsquo;s look at some of the fields, with my annotations about what they actually
mean.</p>

<h3>Reader in</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Reader</span> <span class="n">in</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the <code>Reader</code> whose reads we are buffering. <code>BufferedReader</code> is an
example of the <em>&ldquo;Decorator Pattern&rdquo;</em> and this <code>Reader</code> is whom we&rsquo;re
decorating. Both <code>BufferedReader</code> constructors require <code>in</code> to be passed as a
parameter, and it cannot be changed. Calling <code>this.close()</code> calls</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setting <code>in = null</code> might be to help prevent garbage accumulation when the
client of <code>BufferedReader</code> doesn&rsquo;t properly get rid of the reference to the
<code>BufferedReader</code>.</p>

<h3>char[] cb</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">cb</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">8192</span><span class="o">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This of course is the char buffer itself. We respond to read requests directly
from here as often as possible. We fill it up by issuing <code>in.read(cb, int,
int)</code> requests on the underlying <code>Reader in</code> annotated above.</p>

<p>Here I&rsquo;m showing <em>default</em> internal char buffer size of 8kb. This happens to be
2 disk sectors of an HDD using the first generation of the Advanced Format. I
don&rsquo;t know if that&rsquo;s how 8kb was chosen; perhaps it was chosen using benchmark
comparisons.</p>

<h3>int nChars</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">nChars</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the index in <code>cb</code> corresponding to the last unread <code>char</code> that we may
<code>read()</code> before we need to <code>fill()</code> it again from <code>in</code>.</p>

<h3>int nextChar</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">nextChar</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the index in <code>cb</code> corresponding to the next <code>char</code> that should be
returned by a <code>read()</code>.</p>

<h3>void fill()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">fill</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we block until successfully reading from <code>in</code> into <code>cb</code>, and set <code>nChars</code>
to the end of the valid range of <code>cb</code> and <code>nextChar</code> to zero.</p>

<h3>int read()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returns a single character of the stream, or -1 if the end of the stream has
already been reached.</p>

<p>Basically just does</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">cb</span><span class="o">[</span><span class="n">nextChar</span><span class="o">++];</span>
</span></code></pre></td></tr></table></div></figure>


<p>However if <code>nextChar &gt;= nChars</code>, we have already read to the end of the
existing <code>cb</code>, so we call <code>fill()</code>. Now if <code>fill()</code> fails, we&rsquo;ve reached the
end of the stream, so <code>return -1</code>.</p>

<h3>int read(char[], int, int)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="kt">char</span> <span class="n">cbuf</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This entire method is <code>synchronized</code> behind a <code>lock</code> owned by the parent
<code>Reader</code> class. In <code>Reader</code> it says to use this <code>lock</code> instead of synchronizing
on <code>this</code> &ldquo;for efficiency&rdquo;. I&rsquo;m not sure why that would be any more efficient.</p>

<p>After acquiring the lock, we do bounds checks. I&rsquo;m not sure why this isn&rsquo;t done
<em>before</em> acquiring the lock because all checks are done on the parameters,
which can&rsquo;t change between the time the method is called and the lock is
acquired. So if we did this check before acquiring the lock, we would never
wait on the lock for no reason. Maybe this is so that any concurrent operation
using the lock gets to finish before the exception is thrown on this thread?
That&rsquo;s my best guess at this point.</p>

<p>The documentation says</p>

<blockquote><p>As an additional convenience, it attempts to read as many characters as
possible by repeatedly invoking the <code>read</code> method of the underlying stream.</p></blockquote>

<p>This is accomplished by first copying the rest of the current buffer into the
passed-in <code>cbuf</code>. If this has not yet filled <code>cbuf</code>, keep calling <code>fill()</code> and
then dumping the new buffer contents into <code>cbuf</code>. Seems to me there is an
<strong>extra copying step</strong> into the buffer in this case, where it would perhaps be
faster and more memory efficient copy <em>directly</em> into <code>cbuf</code>. But hey, what do
I know.</p>

<h3>String readline()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">readLine</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returns the next segment of text from the stream terminated by <code>\n</code>, <code>\r</code>, or
<code>\r\n</code>.</p>

<p>This method operates inside a synchronized endless loop building up a
<code>StringBuffer s</code>.</p>

<p>The loop is like this:</p>

<ol>
<li><code>fill()</code> the underlying <code>cb</code> buffer</li>
<li>If the stream ended

<ul>
<li><code>return s.toString()</code></li>
</ul>
</li>
<li>Otherwise, iterate through <code>cb</code> looking for a line ending</li>
<li>If a line ending is found

<ul>
<li>append <code>cb</code> through the line ending to <code>s</code> and return it.</li>
</ul>
</li>
<li>Otherwise, repeat the loop.</li>
</ol>


<h3>long skip(long)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">long</span> <span class="nf">skip</span><span class="o">(</span><span class="kt">long</span> <span class="n">n</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a synchronized loop:</p>

<ol>
<li>If the buffer has all been read <code>fill()</code> it

<ul>
<li><strong>Why?</strong> Why copy memory into the buffer unecessarily? We&rsquo;re just going
to skip some or all of these bytes!</li>
</ul>
</li>
<li>If the buffer is larger than the number of bytes remaining to skip

<ul>
<li>Skip that many bytes into the buffer and return</li>
</ul>
</li>
<li>Otherwise skip over the entire buffer and repeat the loop</li>
</ol>


<h3>boolean ready()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">ready</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Tells whether the stream is ready to be read</p></blockquote>

<p>After acquiring the lock, return try if either the buffer still has unread
data, or <code>in.ready()</code> is true (on the underlying <code>Reader in</code> described above).</p>

<h3>void close()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the lock, close and release the underlying <code>Reader in</code>, and release
<code>cb</code>.</p>

<h3>Conclusion</h3>

<p>Those are all the important methods of <code>BufferedReader</code> that don&rsquo;t involve
<code>mark</code> support.</p>

<p>At this point the reader may have a somewhat deeper understanding of how
<code>BufferedReader</code> manages to achieve such high speeds. I also pointed out
potential inefficiencies in <code>read(char[],int,int)</code> and <code>skip(long)</code>, as well as
an seemingly unecessary block on a lock before bounds checking in
<code>read(char[],int,int)</code>.</p>

<p>You may want to refer back to the takeaways in the introduction.</p>
]]></content>
  </entry>
  
</feed>
